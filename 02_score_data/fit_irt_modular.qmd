```{r load-data}
library(tidyverse)
library(glue)
library(here)
library(mirt)
library(rlang)
library(multidplyr)

source(here("02_score_data/irt_helpers.R"))
source(here("02_score_data/irt_modular.R"), chdir = TRUE)
regdir <- here("02_scoring_outputs", "model_registry")

# tasks to include in these analyses
irt_tasks <- c("math",
               "matrix",
               "mrot",
               "sds",
               "tom",
               "hf",
               "mg",
               "trog",
               "vocab")

task_data_nested <- read_rds(here("01_fetched_data/task_data_nested.rds")) |>
  mutate(language = site |> 
           fct_recode(de = "de_pilot",
                      en = "ca_pilot",
                      en = "partner_us",
                      en = "us_pilot",
                      es_co = "co_pilot"))

task_data_irt <- task_data_nested |> filter(item_task %in% irt_tasks)
```

```{r}
# define set of multigroup models (Rasch/2PL x invariance)
models_multigroup <- tribble(
  ~nfact, ~itemtype, ~invariance,
       1,   "Rasch", "configural",
       # 1,   "Rasch", "metric",
       1,   "Rasch", "full",
       1,     "2PL", "configural",
       # 1,     "2PL", "metric",
       # 1,     "2PL", "scalar_intercepts",
       # 1,     "2PL", "scalar_slopes_and_intercepts",
       1,     "2PL", "full"
)

# define set of pooled models (Rasch/2PL)
models_pooled <- models_multigroup |> distinct(nfact, itemtype)
```

```{r}
# list currently defined objects
objs <- ls()

# set up cluster for parallelization
cluster <- new_cluster(length(irt_tasks)) |>
  cluster_library(c("tidyverse", "mirt", "glue", "rlang")) |>
  cluster_copy(objs)

# hack -- need to call setClass() on cluster to define class 
cluster |> cluster_send({
  ModelRecord <- setClass(
    "ModelRecord",
    slots = c(
      model_class   = "character",  # "SingleGroupClass", "MultipleGroupClass"
      model_vals    = "data.frame", # mod2vals() output
      itemtype      = "character",  # "Rasch", "2PL", "3PL"
      # model         = "mirt.model",
      method        = "character",
      tabdata       = "matrix",
      factors       = "character",
      nfact         = "numeric",
      invariance    = "character",
      loglikelihood = "numeric",
      bic           = "numeric",
      items         = "character",
      runs          = "character",
      groups        = "character"
    )
  )
})

# fit by-language pooled models for each task (in parallel)
cluster |>
  cluster_assign_each(task = irt_tasks) |>
  cluster_send(fit_task_models(task_data = task_data_irt,
                               models = models_pooled,
                               task = task,
                               registry_dir = regdir))

# fit multigroup models for each task (in parallel)
cluster |>
  cluster_send(fit_task_multigroup_models(task_data = task_data_irt,
                                          models = models_multigroup,
                                          task = task,
                                          group = site,
                                          overlap_items = TRUE,
                                          registry_dir = regdir))
```

```{r}
# example calls: pooled models

# fit one task + one language
# fit_task_models_pooled(task_data_nested = task_data_irt, models = models_pooled,
#                        task = "hf", subset_var = language, subset_val = "en_us")

# fit one task + all languages
# fit_task_models(task_data = task_data_irt, models = models_pooled,
#                 task = "hf", registry_dir = regdir)

# fit all tasks + one language
# fit_lang_models(task_data = task_data_irt, models = models_pooled,
#                 lang = "en_us", registry_dir = regdir)

# fit all irt tasks + all languages
# irt_tasks |>
#   walk(\(task) fit_task_models(task_data = task_data_irt,
#                                 models = models_pooled,
#                                 task = task,
#                                 registry_dir = regdir))


# example calls: multigroup models

# fit one task, grouped by site, only overlapping items
# fit_task_multigroup_models(task_data = task_data_irt, models = models_multigroup,
#                            task = "hf", group = site, overlap_items = TRUE,
#                            registry_dir = regdir)

# fit one task, grouped by site, all items
# fit_task_multigroup_models(task_data = task_data_irt, models = models_multigroup,
#                            task = "hf", group = site, overlap_items = FALSE,
#                            registry_dir = regdir)

# fit all irt tasks, only overlapping items
# irt_tasks |>
#   walk(\(task) fit_task_multigroup_models(task_data = task_data_irt,
#                                           models = models_multigroup,
#                                           task = task,
#                                           group = site,
#                                           overlap_items = TRUE,
#                                           registry_dir = regdir))
```
