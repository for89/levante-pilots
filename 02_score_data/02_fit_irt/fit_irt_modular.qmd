```{r load-data}
library(tidyverse)
library(glue)
library(here)
library(mirt)
library(rlang)
library(multidplyr)

source(here("02_score_data/02_fit_irt/irt_helpers.R"))
source(here("02_score_data/02_fit_irt/irt_modular.R"), chdir = TRUE)
regdir <- here("02_scoring_outputs", "model_registry")

# tasks to include in these analyses
irt_tasks <- c("math",
               "matrix",
               "mrot",
               "sds",
               "tom",
               "ha",
               "hf",
               "mg",
               "trog",
               "vocab")

# reference sites to include in these analyses
ref_sites <- c("pilot_uniandes_co", "pilot_leuphana_de", "pilot_western_ca")

task_data_nested <- read_rds(here("01_fetched_data/task_data_nested.rds")) |>
  filter(site %in% ref_sites)

task_data_irt <- task_data_nested |> filter(item_task %in% irt_tasks)
```

```{r}
# define set of multigroup models (Rasch/2PL x invariance)
models_multigroup <- tribble(
  ~nfact, ~itemtype, ~invariance,
       1,   "Rasch", "configural",
       1,   "Rasch", "scalar",
       1,     "2PL", "configural",
       1,     "2PL", "metric",
       1,     "2PL", "scalar",
)

# define set of pooled models (Rasch/2PL)
models_pooled <- models_multigroup |> distinct(nfact, itemtype)
```

```{r}
# list currently defined objects
objs <- ls()

# set up cluster for parallelization
cluster <- new_cluster(length(irt_tasks)) |>
  cluster_library(c("tidyverse", "mirt", "glue", "rlang")) |>
  cluster_copy(objs)

# hack -- need to call setClass() on cluster to define class 
cluster |> cluster_send({
  ModelRecord <- setClass(
    "ModelRecord",
    slots = c(
      model_class   = "character",  # "SingleGroupClass", "MultipleGroupClass"
      model_vals    = "data.frame", # mod2vals() output
      itemtype      = "character",  # "Rasch", "2PL", "3PL"
      # model         = "mirt.model",
      method        = "character",
      data          = "matrix",
      factors       = "character",
      nfact         = "numeric",
      invariance    = "character",
      items         = "character",
      runs          = "character",
      group_names   = "character",
      groups        = "character",
      scores        = "tbl_df",
      fit           = "list"
    )
  )
})

# fit by-language pooled models for each task (in parallel)
cluster |>
  cluster_assign_each(task = irt_tasks) |>
  cluster_send(fit_bylanguage_task(task_data = task_data_irt,
                                   models = models_pooled,
                                   task = task,
                                   registry_dir = regdir))

# fit multigroup models for each task (in parallel)
cluster |>
  cluster_assign_each(task = irt_tasks) |>
  cluster_send(fit_task_models_multigroup(task_data = task_data_irt,
                                          models = models_multigroup,
                                          task = task,
                                          group = site,
                                          overlap_items = TRUE,
                                          registry_dir = regdir))

cluster |>
  cluster_assign_each(task = irt_tasks) |>
  cluster_send(fit_task_models_multigroup(task_data = task_data_irt,
                                          models = models_multigroup,
                                          task = task,
                                          group = site,
                                          overlap_items = FALSE,
                                          registry_dir = regdir))
```

```{r}
# fit_bylanguage_task(task_data = task_data_irt,
#                     models = models_pooled,
#                     task = "hf",
#                     registry_dir = regdir)
# 
# irt_tasks |> map(\(tsk) {
#   fit_bylanguage_task(task_data = task_data_irt,
#                       models = models_pooled,
#                       task = tsk,
#                       registry_dir = regdir)
# })
# 
# fit_task_models_multigroup(task_data = task_data_irt,
#                            models = models_multigroup,
#                            task = "hf",
#                            group = site,
#                            overlap_items = TRUE,
#                            registry_dir = regdir)
# 
# fit_task_models_multigroup(task_data = task_data_irt,
#                            models = m1,
#                            task = "hf",
#                            group = site,
#                            overlap_items = TRUE,
#                            registry_dir = regdir)
# 
# fit_task_models_multigroup(task_data = task_data_irt,
#                            models = models_multigroup,
#                            task = "hf",
#                            group = site,
#                            overlap_items = FALSE,
#                            registry_dir = regdir)
```
