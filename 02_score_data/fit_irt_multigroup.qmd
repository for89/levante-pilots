This notebook fits multigroup IRT models, in contrast to `fit_irt.qmd`, which is by-group. 

Our task-by-task strategy for looking at measurement invariance:

* fit multigroup IRT model assuming scalar invariance - group mean and variance can vary but the item parameters are assumed to be the same
* compare 1PL and 2PL (and eventually, 1D and 2D) models using IMV
* look for outliers either on outfit or slopes in 2PL
* uniform logistic DIF as a first step
* compute marginal reliabilities using `marginal_rxx` 
* use resulting item parameters for fitting CATs
* use EAP fscores to get thetas for each child

# General data loading

```{r load-data}
library(tidyverse)
library(glue)
library(here)
library(mirt)

source(here("02_score_data/irt_helpers.R"))

# tasks to include in these analyses
irt_tasks <- c("egma-math",
               "matrix-reasoning",
               "mental-rotation",
               "same-different-selection",
               "theory-of-mind",
               "hearts-and-flowers",
               "memory-game",
               "trog",
               "vocab")

sites <- c("ca_pilot", "co_pilot", "de_pilot")
site_task_data_nested <- sites |>
  set_names() |>
  map(\(s) read_rds(here(glue("01_processed_data/{s}/task_data_nested.rds")))) |>
  list_rbind(names_to = "site") |>
  filter(task_id %in% irt_tasks)

# now bind site data
task_data_nested <- site_task_data_nested |>
  mutate(data = pmap(list(data, site), function(d,s) {
    d$site <- s
    return(d) 
    })) |>
  group_by(task_id) |>
  summarise(data = list(bind_rows(data)))
```


```{r}
id_map <- read_csv(here("02_score_data/item_metadata/pilot-item-ID mapping.csv"))

trial_id_map <- id_map |>
  mutate(trials = trials |> str_split(",")) |>
  unnest(trials) |>
  rename(trial_id = trials) |>
  mutate(trial_id = str_trim(trial_id))
```


# Model fitting

```{r}

task_data_nested$data_with_ids <- map(task_data_nested$data, \(df) {
  left_join(df, trial_id_map)  |>
  select(-item_id) |>
  rename(item_id = item_uid, 
         group = site)})

task_data_prepped <- task_data_nested |>
  mutate(data_filtered = map(data_with_ids, \(df) df |> filter_repeat_runs() |>
                               dedupe_items() |> remove_no_var_items()),
         data_wide = map(data_filtered, to_mirt_shape_grouped), 
         data_prepped = map(data_wide, \(df) df |> select(-group)),
         groups = map(data_wide, \(df) df |> pull(group))) |>
  # pull out chance values
  mutate(guess = map(data_filtered, # TODO: check that this gives correct order
                     \(df) df |> distinct(item_inst, chance) |> pull(chance)))


item_types <- c("Rasch", "2PL") #, "3PL") # set of parameterizations
model_types <- c(1) #, 2) # set of dimensionalities
# model_types <- c(1) # set of dimensionalities

# add arguments for model fitting to data
task_data_args <- task_data_prepped |>
  # duplicate rows per dimensionality x parameterization
  expand_grid(model_type = model_types, item_type = item_types) |>
  # generate model string with item constraints + dimensionality
  mutate(model_str = pmap_chr(list(data, data_prepped, item_type, model_type),
                              generate_model_str_numeric))
```

Joint model fitting. 

```{r fit-models}
set.seed(1234)

# fit all the models!
task_models <- task_data_args |>
  mutate(mod = pmap(list(row_number(), data_prepped, item_type, model_str,
                         model_type, task_id, guess),
                    fit_mirt))

# get each model's coefs, scores, BIC
task_results <- task_models |>
  mutate(coefs = map(mod, mirt_coefs),
         scores = pmap(list(mod, data_filtered, data_prepped), mirt_scores),
         bic = map_dbl(mod, mirt_bic))

# best fitting model for each task
task_best <- task_results |>
  group_by(task_id) |>
  filter(bic == min(bic)) |>
  ungroup()
  # select(site, task_id, item_type, model_type, coefs, scores)

# scores from best fitting models
task_scores <- task_best |>
  select(task_id, item_type, model_type, scores) |>
  unnest(scores) |>
  mutate(#item_type = fct_recode(item_type, "1PL" = "Rasch"),
         metric_type = glue("ability ({item_type}-{model_type})")) |>
  select(task_id, user_id, run_id, metric_type, metric_value = ability)
```

```{r}
task_multigroup <- task_best |>
  mutate(mod_metric = pmap(list(row_number(), data_prepped, item_type, groups, model_str, 
                                list("metric"), task_id), fit_multigroup),
         mod_scalar = pmap(list(row_number(), data_prepped, item_type, groups, model_str, 
                                list("scalar"), task_id), fit_multigroup),
         mod_full = pmap(list(row_number(), data_prepped, item_type, groups, model_str, 
                                list("full"), task_id), fit_multigroup))
```

```{r}
task_multigroup <- task_multigroup |>
  mutate(anova = pmap(list(mod_metric, mod_scalar, mod_full), anova)) 

save(task_multigroup, 
     file = here("02_scored_data/irt_outputs/multigroup_outputs.rds"))
```

```{r}
best_multigroup <- task_multigroup |>
  select(task_id, item_type, mod_metric, mod_scalar, mod_full) |>
  pivot_longer(cols = starts_with("mod"), 
               names_to = "model_type", values_to = "mod") |>
  filter(!(model_type == "mod_full" & item_type == "Rasch")) |>
# get rid of full model for rasch
  mutate(bic = map_dbl(mod, mirt_bic)) |>
  group_by(task_id) |>
  filter(bic == min(bic)) |>
  ungroup() |>
  mutate(fscore = map(mod, \(df) fscores(df)[,1]))
```


# Plot fscores. 

```{r}
# this is terrible column alignment

groups <- task_multigroup |> 
  select(task_id, groups, data_wide) |> 
  mutate(user_id = map(data_wide, rownames)) |>
  select(-data_wide) |>
  unnest(c(groups, user_id))


all_fscores <- best_multigroup |>
  select(task_id, model_type, fscore) |>
  unnest(fscore) |>
  bind_cols(select(groups, -task_id)) |>
  rename(site = groups) |>
  left_join(run_ages)


```

```{r}
ggplot(all_fscores,
       aes(x = age, y = fscore, col = site)) + 
  geom_point(alpha = .05) + 
  geom_smooth(method = "loess", span = 1) + 
  xlab("Age (years)") + 
  xlim(5,13)+ 
  ylab("Ability") + 
  facet_wrap(~task_id) + 
  ggthemes::theme_few() +
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```


