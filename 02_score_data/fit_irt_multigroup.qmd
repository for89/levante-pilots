Our task-by-task strategy for looking at measurement invariance:

* fit multigroup IRT model assuming scalar invariance - group mean and variance can vary but the item parameters are assumed to be the same
* compare 1PL and 2PL (and eventually, 1D and 2D) models using IMV
* look for outliers either on outfit or slopes in 2PL
* uniform logistic DIF as a first step
* compute marginal reliabilities using `marginal_rxx` 
* use resulting item parameters for fitting CATs
* use EAP fscores to get thetas for each child

```{r load-data}
library(here)
source(here("assessment/colombia/stage2/scripts/_setup.R"))
source(here("assessment/colombia/stage2/scripts/irt_helpers.R"))

task_data_nested <- read_rds(here("02_scored_data/task_data_nested.rds"))

task_data_combined <- task_data_nested |>
  select(-task_id) |>
  unnest(data) |>
  rename(group = site) |>
  nest(data = -task_id)

# transform each task's data for modeling by applying above functions
task_data_prepped <- task_data_combined |>
  mutate(data_filtered = map(data, \(df) df |> filter_repeat_runs() |>
                               dedupe_items() |> remove_no_var_items()),
         data_wide = map(data_filtered, to_mirt_shape_grouped),
         data_prepped = map(data_wide, \(df) df |> select(-group)),
         groups = map(data_wide, \(df) df |> pull(group))) |>
  # pull out chance values
  mutate(guess = map(data_filtered, # TODO: check that this gives correct order
                     \(df) df |> distinct(item_inst, chance) |> pull(chance)))
```

```{r}
dataset_item_counts <- task_data_prepped |>
  select(task_id, data_filtered) |>
  unnest(data_filtered) |>
  distinct(group, dataset, task_id, item_id) |>
  group_by(task_id, item_id) |>
  summarise(m_datasets = n(),
            datasets = list(dataset)) |>
  ungroup()

write_csv(dataset_item_counts, "dataset_item_counts.csv")

dataset_counts <- dataset_item_counts |>
  count(task_id, m_datasets, name = "n_items_in_m_datasets") |>
  arrange(task_id, desc(m_datasets))

ggplot(dataset_counts, aes(x = m_datasets, y = n_items_in_m_datasets)) +
  facet_wrap(vars(task_id), scales = "free_y") +
  geom_col()

ggsave("dataset_item_counts.png", width = 8, height = 6)
```

# Mental Rotation

```{r}
mrot <- task_data_prepped |> slice(1)

d_mrot <- mrot$data[[1]]
```

```{r}
d_mrot |>
  mutate(angle = as.numeric(str_sub(item_id, -3, -1))) |>
  group_by(group, user_id, run_id, corpus_trial_type, angle) |>
  summarise(correct = mean(correct)) |>
  filter(!is.na(corpus_trial_type)) |>
  ggplot(aes(x = angle, y = correct,  col = corpus_trial_type)) + 
  geom_jitter(alpha = .1, width = 5, height = 0) + 
  geom_smooth(aes(group = corpus_trial_type), method = "loess") + 
  geom_hline(yintercept = .5, lty =2) + 
  facet_wrap(~group)
```



```{r}
mrot <- task_data_prepped |> slice(1)

# TODO: port item constraints? priors? guess?
mrot_mod_rasch <- multipleGroup(
  mrot$data_prepped[[1]], group = mrot$groups[[1]], itemtype = "Rasch", 
  invariance = c("free_means","free_variances", "slopes", "intercepts"))

mrot_mod_2pl <- multipleGroup(
  mrot$data_prepped[[1]], group = mrot$groups[[1]], itemtype = "2PL", 
  invariance = c("free_means","free_variances", "slopes", "intercepts"))
```

```{r}
# extract submodels from multigroup models
mrot_submods_rasch <- multigroup_extract_groups(mrot_mod_rasch)
mrot_submods_2pl <- multigroup_extract_groups(mrot_mod_2pl)

# get item coefs
mrot_coefs_rasch <- multigroup_coefs(mrot_mod_rasch)
mrot_coefs_2pl <- multigroup_coefs(mrot_mod_2pl)
```


```{r}
# outliers by 2PL slope
mrot_outliers_a1 <- mrot_coefs_2pl |> filter(abs(a1) > 3) 

ggplot(mrot_coefs_2pl |>
         select(-g,-u) |>
         pivot_longer(a1:d, names_to = "parameter", values_to = "value"), 
       aes(x = value)) + 
  geom_histogram(binwidth = 1) + 
  facet_wrap(~parameter)
```


```{r}
ggplot(mrot_coefs_2pl, 
       aes(x = d, y = a1, col = site)) + 
  geom_point() 
```




My understanding is that we want outfit (unweighted) for the Rasch model.


```{r}
mrot_infit_rasch <- multigroup_itemfit(mrot_submods_rasch, "infit")

```



```{r}
# infit/outfit statistics
mrot_infit_2pl <- multigroup_itemfit(mrot_submods_2pl, "infit")

# outliers by outfit
mrot_outliers_outfit_rasch <- mrot_infit_rasch |> filter(abs(z.outfit) > 1)
mrot_outliers_outfit_2pl <- mrot_infit_2pl |> filter(abs(z.outfit) > 1)
```

```{r}
# marginal reliabilities
mrot_marginal_rasch <- mrot_submods_rasch |> map(marginal_rxx) # why are these the same?
mrot_marginal_2pl <- mrot_submods_2pl |> map(marginal_rxx) # why are these the same?
```


```{r}
# difR needs to have only items that are present in more than one group
df <- mrot$data_filtered[[1]] |>
  group_by(item_id) |>
  filter(n_distinct(group) > 1) |>
  ungroup() |>
  to_mirt_shape_grouped()
dp <- df |> select(-group)
gr <- df |> pull(group)

setdiff(colnames(mrot$data_prepped[[1]]), colnames(df))

mrot_dif <- difR::difLogReg(dp,
                            group = gr,
                            focal.name = "CO",
                            group.type = "group",
                            type = "udif", 
                            purify = TRUE)

# mrot_dif$DIFitems
mrot_difitems <- colnames(dp)[mrot_dif$DIFitems]
```
