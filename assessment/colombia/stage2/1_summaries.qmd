---
format: html
---
  
```{r setup}
source("scripts/_setup.R")

trials_coded <- read_rds("data_processed/trials_coded.rds")
participants <- read_rds("data_processed/participants.rds")
```

Combine all task scores into one plot!

```{r}
score_list <- list.files("scores", full.names = TRUE) |> set_names() |> map(read_rds)
# exclude_tasks <- c("hostile-attribution", "pa-es")
# score_list <- read_rds("scores/combined_scores.rds")

task_categories <- tribble(
  ~task, ~task_category,
  "hearts-and-flowers", "executive function",
  "same-different-selection", "executive function",
  "memory-game", "executive function",
  "mefs", "executive function",
  "egma-math", "math",
  "matrix-reasoning", "reasoning",
  "mental-rotation", "spatial cognition",
  "trog", "language",
  "vocab", "language",
  "pa-es", "reading",
  "sre-es", "reading",
  "swr-es", "reading",
  "theory-of-mind", "social cognition",
  "hostile-attribution", "social cognition",
  "emotion-reasoning", "social cognition"
) |> mutate(task_category = task_category |> str_to_sentence() |> fct_inorder())

# temporary replacement of ToM scores
score_list[[1]] <- score_list[[1]] |> filter(!(task %in% c("theory-of-mind", "hostile-attribution")))

scores <- score_list |>
  map(\(sc) sc |> mutate(task = as.character(task))) |>
  bind_rows() |>
  select(-age) |> # remove ages that have come along for the ride and are not directly computed in participants
  # filter(!(task %in% exclude_tasks)) |>
  left_join(participants |> select(user_id, age)) |>
  # left_join(participants) |>
  filter(!is.na(age), age >= 5, age <= 12) |>
  group_by(task) |>
  mutate(n = n_distinct(user_id), task_label = glue("{task}\n(n = {n})")) |>
  mutate(score_age = lm(score ~ age)$residuals) |>
  ungroup() |>
  left_join(task_categories) |>
  mutate(score_type = score_type |> str_remove(" \\(.*\\)"))

task_categories_vec <- levels(scores$task_category)
task_pal <- ptol_pal()(length(task_categories_vec)) |> set_names(task_categories_vec)
```

```{r}
task_plot <- \(tasks, nr = 1) {
  ggplot(scores |> filter(!is.na(age), task %in% tasks),
         aes(x = age, y = score)) +
    ggh4x::facet_nested_wrap(vars(task_category, task_label), nrow = nr,
                             nest_line = element_line(), solo_line = TRUE,
                             axes = "x",
                             scales = "free_y") +
    geom_point(aes(colour = task_category), alpha = 0.5) +
    geom_smooth(method = "gam", colour = "darkgrey") +
    scale_x_continuous(breaks = seq(6, 14, 2)) +
    scale_colour_manual(values = task_pal) +
    labs(x = "Age (years)", y = "Score") +
    guides(colour = "none")
}

all_tasks <- unique(scores$task)
task_plot(all_tasks, 3)
ggsave("plots/scores/all_scores.png", width = 12, height = 8)

task_plot("matrix-reasoning")
ggsave("plots/scores/mxr.png", width = 4, height = 4)

task_plot("mental-rotation")
ggsave("plots/scores/mr.png", width = 4, height = 4)

task_plot(c("theory-of-mind", "hostile-attribution", "emotion-reasoning"))
ggsave("plots/scores/tom.png", width = 9, height = 4)

ef_tasks <- c("hearts-and-flowers", "memory-game", "same-different-selection", "mefs")
task_plot(ef_tasks)
ggsave("plots/scores/ef.png", width = 11, height = 4)

task_plot(c("sre-es", "swr-es", "trog", "vocab"))
ggsave("plots/scores/lang.png", width = 9, height = 4)
```

```{r}
cors_plot <- \(tasks, measure) {
  measure <- enquo(measure)
  scores |>
    filter(task %in% tasks) |>
    select(user_id, task, !!measure) |>
    pivot_wider(names_from = task, values_from = !!measure) |>
    select(-user_id) |>
    GGally::ggpairs()
}

cors_plot(c("theory-of-mind", "hostile-attribution", "emotion-reasoning"), score)
ggsave("plots/cors/tom_cors.png", width = 6, height = 5)

cors_plot(ef_tasks, score)
ggsave("plots/cors/ef_cors.png", width = 8.5, height = 8.5)

cors_plot(ef_tasks, score_age)
ggsave("plots/cors/ef_cors_age.png", width = 8.5, height = 8.5)

age_cors <- scores |>
  group_by(task) |>
  summarise(age_cor = cor(score, age),
            agec_cor = cor(score_age, age)) # should be near zero

pair_cor <- \(task1, task2) {
  if (task1 == task2) return(1)
  tasks <- scores |>
    filter(task == task1 | task == task2) |>
    select(user_id, task, score) |>
    pivot_wider(id_cols = user_id, names_from = task, values_from = score) |>
    set_names(c("user_id", "task1", "task2"))
  cor(tasks$task1, tasks$task2, use = "na.or.complete")
}

pair_cors <- expand_grid(task1 = all_tasks, task2 = all_tasks) |>
  mutate(cor = map2_dbl(task1, task2, pair_cor))

all_cors <- age_cors |> select(task2 = task, cor = age_cor) |> mutate(task1 = "age") |>
  bind_rows(tibble(task1 = "age", task2 = "age", cor = 1)) |>
  bind_rows(pair_cors) |>
  left_join(scores |> distinct(category1 = task_category, task1 = task)) |>
  left_join(scores |> distinct(category2 = task_category, task2 = task)) |>
  arrange(task1, task2) |>
  group_by(task1) |>
  filter(row_number() >= which(task1 == task2)) |>
  filter(task1 != task2) |>
  mutate(task = task1, task1 = task2, task2 = task) |>
  mutate(label = round(cor, 2))

ggplot(all_cors, aes(x = task1, y = task2)) +
  coord_equal() +
  geom_raster(aes(fill = cor)) +
  geom_text(aes(label = label), family = .font) +
  scale_fill_distiller(palette = "Spectral", na.value = "white") +
  scale_y_discrete(limits = rev) +
  scale_x_discrete(limits = rev, position = "top") +
  theme(axis.text.x = element_text(angle = 90, hjust = 0)) +
  labs(x = "", y = "", fill = "correlation")
ggsave("plots/cors/all_pairs.png", width = 8, height = 8)
```

Table of median task times

```{r}
time_summary <- trials_coded |>
  mutate(server_timestamp = as_datetime(server_timestamp)) |>
  arrange(user_id, run_id, server_timestamp) |>
  group_by(task_id, run_id, user_id) |>
  summarise(trials = n(),
            start = min(server_timestamp), end = max(server_timestamp)) |>
  ungroup() |>
  mutate(diff = difftime(end, start, units = "mins")) |>
  left_join(participants) |>
  left_join(task_categories, by = c("task_id" = "task")) |>
  filter(trials > 2)

ggplot(time_summary, aes(x = diff)) +
  facet_wrap(vars(task_id)) +
  geom_histogram()

task_time_summary <- time_summary |>
  group_by(task_category, task_id) |>
  summarise(median_diff = median(diff),
            min_diff = min(diff),
            max_diff = max(diff)) |>
  ungroup() |>
  mutate(across(contains("diff"), \(d) round(d, 2))) |>
  mutate(combined_diff = glue("{median_diff} [{min_diff}, {max_diff}]"))

task_time_summary
sum(task_time_summary$median_diff)

run_time_summary <- time_summary |>
  group_by(user_id, run_id) |>
  summarise(total = sum(diff)) |>
  ungroup() |>
  summarise(med = median(total))

user_summary <- time_summary |>
  group_by(user_id) |>
  summarise(total = sum(diff)) |>
  ungroup() |>
  summarise(med = median(total))
```
