
# EFA analysis for surveys for caregiver

## Data preparation
```{r}
source(here::here("03_summaries", "efa", "efa_helpers.R"))
#survey_coded <- read_rds(here::here("01_processed_data/survey_coded.rds"))
survey_measurement <- read_rds(here::here("01_processed_data/survey_measurement.rds"))

caregiver <- survey_measurement |>
  filter(survey_type == 'caregiver') 
table(caregiver$site)

caregiver_tidy = caregiver |>
  select(user_id, site, survey_response_id, child_id, variable, value, form_construct) |>
  filter(!is.na(form_construct), 
         !is.na(value),
         form_construct != 'Safety') |> # safety only have one item and cannot be used for EFA
  nest(data = -c(site, form_construct)) |>
  mutate(df_vals = map(data, function(df) {
    df |>
      pivot_wider(names_from = variable, values_from = value) |>
      select(-c(user_id,survey_response_id,child_id))
  })) 

constructs = as.vector(unique(caregiver_tidy$form_construct))
sites = as.vector(unique(caregiver_tidy$site))


cat('sample size\n')
for(i in sites){
  cat(i)
  cat('\t')
  selected_site <- caregiver_tidy |>
    filter(site == i) 
  cat(nrow(selected_site[['df_vals']][[1]]))
  cat('\t')
}

### since number of sample size is too low for de_pilot and ca_pilot
### currently we focus on co_pilot

caregiver_tidy_co = caregiver_tidy |>
    filter(site == 'co_pilot') 
head(caregiver_tidy_co)
```
## Correlation Heatmap
```{r}

for(formi in 1:nrow(caregiver_tidy_co)){
  subconstruct <- caregiver_tidy_co[['df_vals']][[formi]]
  cor_matrix <- cor(subconstruct, use = "pairwise.complete.obs")

  corrplot(cor_matrix, method = "color", col = col, type = "upper", order = "original",
          tl.pos = "l", 
          tl.col = "black", 
          title =  caregiver_tidy_co[['form_construct']][[formi]], 
          is.corr = FALSE,
          mar=c(0,0,2,0),
          col.lim = c(-1, 1)) 
}

```



## EFA Analysis and Loading Matrix Plot

### Caregiver Well-being

Determine the number of factors
```{r}
formi = 1
# standardization for following analysis (for better interpretation of loadings)
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

# Parallel analysis
fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(subconstruct, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])

```

EFA analysis
```{r}
EFAresult = factanal(~ ., data=subconstruct, factors = 3,
  rotation = "promax", na.action = na.exclude)

loadings_df <- loadmax(EFAresult$loadings, subconstruct)

plot_load(loadings_df, caregiver_tidy_co[['form_construct']][[formi]], uplimit = 1.07)
```

### Child Health/Well being

Determine the number of factors
```{r}
formi = 2
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

subconstruct <- subconstruct[, grepl("SDQ", names(subconstruct))]
# only use SDQ items for now - may need update in the future

# Parallel analysis
fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(subconstruct, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
```

EFA analysis
```{r}
EFAresult = factanal(~ ., data=subconstruct, factors = 2,
  rotation = "promax", na.action = na.exclude)

loadings_df <- loadmax(EFAresult$loadings, subconstruct)

plot_load(loadings_df, caregiver_tidy_co[['form_construct']][[formi]])
```


### Executive Function

Determine the number of factors
```{r}
formi = 3
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

# Parallel analysis
fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(subconstruct, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
```

EFA analysis
```{r}
EFAresult = factanal(~ ., data=subconstruct, factors = 3,
  rotation = "promax", na.action = na.exclude)

loadings_df <- loadmax(EFAresult$loadings, subconstruct)
plot_load(loadings_df, caregiver_tidy_co[['form_construct']][[formi]])
```



### Home Environment

Determine the number of factors
```{r}
formi = 4
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

# Parallel analysis
#fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(subconstruct, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
```

EFA analysis
```{r}
#EFAresult = factanal(~ ., data=subconstruct, factors = 9,
#  rotation = "promax", na.action = na.exclude)

# current sample size cannot support EFA for home environment due to its large number of items 
```

### Parenting

Determine the number of factors
```{r}
formi = 5
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

# Parallel analysis
fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(subconstruct, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
```

EFA analysis
```{r}
EFAresult = factanal(~ ., data=subconstruct, factors = 3,
  rotation = "promax",#"varimax", 
  na.action = na.exclude)


loadings_df <- loadmax(EFAresult$loadings, subconstruct)

plot_load(loadings_df, caregiver_tidy_co[['form_construct']][[formi]], uplimit = 1.01)
```

### Social Emotional

```{r}
formi = 6
subconstruct = caregiver_tidy_co[['df_vals']][[formi]] |>
  scale(center=TRUE, scale=TRUE) |> as.data.frame()

# Create dataset with columns labeled "Jukes"
jukes_data <- subconstruct[, grepl("Jukes", names(subconstruct))]

# Create dataset with columns not labeled "Jukes"
non_jukes_data <- subconstruct[, !grepl("Jukes", names(subconstruct))]
```

jukes 
```{r}
# Parallel analysis
fa.parallel(jukes_data, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(jukes_data, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
```


EFA analysis
```{r}
EFAresult = factanal(~ ., data=jukes_data, factors = 2,
  rotation = "promax",#"varimax", 
  na.action = na.exclude)


loadings_df <- loadmax(EFAresult$loadings, jukes_data)

plot_load(loadings_df, 'ChildJukes', uplimit = 1.03)
```

non jukes 
```{r}
# Parallel analysis
fa.parallel(non_jukes_data, fa="both", n.iter=100, plot=FALSE)

# Scree plot
scree(non_jukes_data, factors=TRUE, pc=F, 
      main =caregiver_tidy_co[['form_construct']][[formi]])
# based on PA : 4
```

EFA analysis
```{r}
EFAresult = factanal(~ ., data=non_jukes_data, factors = 4,
  rotation = "promax",#"varimax", 
  na.action = na.exclude)


loadings_df <- loadmax(EFAresult$loadings, non_jukes_data)

plot_load(loadings_df, caregiver_tidy_co[['form_construct']][[formi]], uplimit = 1.16)
```








