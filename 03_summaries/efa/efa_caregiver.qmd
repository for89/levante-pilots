
# EFA analysis for surveys for caregiver

## Data preparation
```{r}
source(here::here("03_summaries", "efa", "efa_helpers.R"))
survey_data_nested <- read_rds(here::here("01_fetched_data/survey_data_nested.rds"))


get_survey_data <- function(survey_data_nested, type) {
  survey_data_nested %>%
    filter(survey_type == type) %>%
    pull(data) %>%
    .[[1]] %>%
    collect()
}

caregiver_data <- get_survey_data(survey_data_nested, "caregiver")
#teacher_data   <- get_survey_data(survey_data_nested, "teacher")
#student_data   <- get_survey_data(survey_data_nested, "student")


caregiver_tidy <- caregiver_data %>%
  select(site, user_id, child_id, variable, value, form_construct) %>%
  filter(!is.na(form_construct),
         !is.na(value),
         form_construct != 'Safety') %>%
  group_by(site, form_construct, user_id, child_id, variable) %>%
  filter(n() == 1) %>%  # remove duplicate responses
  ungroup() %>%
  nest(data = c(user_id, child_id, variable, value)) %>%
  mutate(df_vals = map(data, function(df) {
    df %>%
      pivot_wider(
        names_from = variable,
        values_from = value
      )
  }))


constructs = as.vector(unique(caregiver_tidy$form_construct))
sites = as.vector(unique(caregiver_tidy$site))


cat('sample size\n')
for(i in sites){
  cat(i)
  cat('\t')
  selected_site <- caregiver_tidy |>
    filter(site == i) 
  cat(nrow(selected_site[['df_vals']][[1]]))
  cat('\t')
}

### since number of sample size is too low for ca_pilot
### currently we focus on co_pilot and de_pilot
caregiver_tidy = caregiver_tidy |>
  filter(site != 'ca_pilot') %>%
  mutate(df_scaled = map(df_vals, ~ {
    .x %>%
      select(-user_id, -child_id) %>%
      scale(center = TRUE, scale = TRUE) %>%
      as.data.frame()
  }))

sites = sites[sites != "ca_pilot"]

caregiver_tidy$fscore <- vector("list", nrow(caregiver_tidy))
```

## Correlation Heatmap
```{r}

for(formi in constructs){
  for(sitei in unique(pull(caregiver_tidy, site))){
  
    subconstruct <- caregiver_tidy %>%
      filter(form_construct == formi, site == sitei) |> pull(df_scaled)  %>% .[[1]]
    
    cor_matrix <- cor(subconstruct, use = "pairwise.complete.obs")

    corrplot(cor_matrix, method = "color", col = col, type = "upper", order = "original",
            tl.pos = "l", 
            tl.col = "black", 
            title =  paste0(sitei, ":", formi), 
            is.corr = FALSE,
            mar=c(0,0,2,0),
            col.lim = c(-1, 1)) 
}
}

# note that some cols are '?" likely due to high proportions of missing values or low variation (e.g., sd close to 0) in that variable -- Some variables were excluded during the exploratory factor analysis because they caused the parallel analysis to fail.
```



## EFA Analysis and Loading Matrix Plot


### Parenting

Determine the number of factors
```{r}
formi = "Parenting"
for(sitei in sites){
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]
  
  
  subconstruct <- subconstruct[, !colnames(subconstruct) %in% "SelfParentStressNSCHh8"]
  # remove SelfParentStressNSCHh8 variable since it contains too much missing values and fails the parallel analysis 

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```



EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_pilot = 3,
  de_pilot = 3
)

for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  subconstruct <- subconstruct[, !colnames(subconstruct) %in% "SelfParentStressNSCHh8"]
  # remove SelfParentStressNSCHh8 variable since it contains too much missing values and fails the parallel analysis 
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  caregiver_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")

p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 


#ggsave(here::here(paste0("03_summaries/efa/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)

```

### Child Health/Well being

Determine the number of factors
```{r}
formi = "Child Health/Well-Being"
for(sitei in sites){
cat(sitei)
    subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
      pull(df_scaled)  %>% .[[1]]
  
  subconstruct <- subconstruct[, grepl("SDQ", names(subconstruct))]
  # only use SDQ items for now - may need update in the future

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```

EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_pilot = 2,
  de_pilot = 2
)


for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  
  subconstruct <- subconstruct[, grepl("SDQ", names(subconstruct))]
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  caregiver_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}

# combined plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")


p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 

#ggsave(here::here(paste0("03_summaries/efa/", gsub("[/\"']", "_", formi), ".png")), width = 6, height = 6, dpi = 300)
```



### Executive Function

Determine the number of factors
```{r}
formi = "Executive Function"
for(sitei in sites){
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```

EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_pilot = 2,
  de_pilot = 2
)

for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  caregiver_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")


p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 

#ggsave(here::here(paste0("03_summaries/efa/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)

```





### Social Emotional

Determine the number of factors

#### ChildJukes
```{r}
formi = "Social Emotional"
for(sitei in sites){
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  subconstruct <- subconstruct[, grepl("Jukes", names(subconstruct))]
  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", "ChildJukes"))
}
```


```{r}
nfactors <- c(
  co_pilot = 2,
  de_pilot = 2
)

for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  subconstruct <- subconstruct[, grepl("Jukes", names(subconstruct))] 
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")

p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = "ChildJukes",
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 

#ggsave(here::here(paste0("03_summaries/efa/", "ChildJukes", ".png")), width = 8, height = 8, dpi = 300)

```

#### other variables


```{r}
formi = "Social Emotional"
for(sitei in sites){
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  subconstruct <- subconstruct[, !grepl("Jukes", names(subconstruct))]
  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```




EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_pilot = 2,
  de_pilot = 2
)

for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  subconstruct <- subconstruct[, !grepl("Jukes", names(subconstruct))]
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  caregiver_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")

p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 

#ggsave(here::here(paste0("03_summaries/efa/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)
```




### Caregiver Well-being

Determine the number of factors
```{r}
formi = "Caregiver Well-Being"
for(sitei in sites){
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]
  
  # missing values in SelfLifeChanges19 SelfLifeChanges25 SelfLifeChanges32 SelfLifeChanges36 SelfLifeChanges41 SelfLifeChanges44 SelfLifeChanges45 SelfLifeChanges47 SelfLifeChanges52 SelfLifeChanges54 SelfLifeChanges74  failed the parallel analysis
  # analyze other variables first
  subconstruct <- subconstruct[, !grepl("SelfLifeChanges", colnames(subconstruct))]

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```


EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_pilot = 3,
  de_pilot = 3
)

for(sitei in sites){
  # data preparation
  row_index <- which(caregiver_tidy$form_construct == formi & caregiver_tidy$site == sitei)
  ids <- caregiver_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = caregiver_tidy$df_scaled[[row_index]]
  subconstruct <- subconstruct[, !grepl("SelfLifeChanges", colnames(subconstruct))]
  
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = nfactors[sitei], scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  caregiver_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")

p_co_pilot + p_de_pilot + 
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold",  size = 14))
  ) 

#ggsave(here::here(paste0("03_summaries/efa/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)

```
