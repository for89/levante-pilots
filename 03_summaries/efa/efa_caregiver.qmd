
# EFA analysis for surveys for caregiver

## Data preparation
```{r}
source(here::here("03_summaries", "efa", "efa_helpers.R"))
survey_data_nested <- read_rds(here::here("01_fetched_data/survey_data_nested.rds"))


get_survey_data <- function(survey_data_nested, type) {
  survey_data_nested %>%
    filter(survey_type == type) %>%
    pull(data) %>%
    .[[1]] %>%
    collect()
}

caregiver_prolific <- read_rds(here::here("surveys_prolific/parent/v3/data_processed/survey_tidy.rds")) |>
  mutate(id = as.character(id)) |>
  select(child_id = id, form_construct, form_subconstruct, question_type,
         variable = variable_name, value) |>
  mutate(site = "prolific", dataset = "prolific", user_id = child_id, .before = everything())  |>
  mutate(form_construct = if_else(grepl("SelfSupport", variable),
                                  "Caregiver Well-Being", form_construct))

caregiver_data <- get_survey_data(survey_data_nested, "caregiver")
#teacher_data   <- get_survey_data(survey_data_nested, "teacher")
#student_data   <- get_survey_data(survey_data_nested, "student")


# combine co_bogota and co_rural, delete ca_western for sample size reasons
caregiver_data <- caregiver_data %>%
  bind_rows(caregiver_prolific) %>%
  mutate(site = case_when(
    site %in% c("co_bogota", "co_rural") ~ "co_bogota_rural",
    TRUE ~ site
  ))  %>%
  filter(site != 'ca_western')
  

caregiver_tidy <- caregiver_data |>
  filter(question_type == "Measurement") %>%   
  select(site, user_id, child_id, variable, value, form_construct) %>%
  filter(!is.na(form_construct),
         !is.na(value),
         form_construct != 'Safety') %>%
  group_by(site, form_construct, user_id, child_id, variable) %>%
  filter(n() == 1) %>%  # remove duplicate responses
  ungroup() %>%
  nest(data = c(user_id, child_id, variable, value)) %>%
  mutate(df_vals = map(data, function(df) {
    df %>%
      pivot_wider(
        names_from = variable,
        values_from = value
      )
  }))

sites = as.vector(unique(caregiver_tidy$site))
cat('sample size\n')
for(i in sites){
  cat(i)
  cat('\t')
  selected_site <- caregiver_tidy |>
    filter(site == i) 
  cat(nrow(selected_site[['df_vals']][[1]]))
  cat('\t')
}


```

### SDQ data


## SDQ Data preparation

```{r}
item_map <- tibble::tribble(
  ~variable,           ~new_subconstruct,
  "ChildSCS7",         "Prosocial",
  "ChildCBQ1",         "Prosocial",
  "ChildSDQ2",         "Hyperactivity",
  "ChildSDQ3",         "Emotional Problems",
  "ChildSCS9",         "Prosocial",
  "ChildSCS8",         "Emotional Problems",
  "ChildSDQ6",         "Peer Problems",
  "ChildSCS6",         "Conduct Problems",
  "ChildSDQ8",         "Emotional Problems",
  "ChildSCS10",        "Prosocial",
  "ChildSDQ10",        "Hyperactivity",
  "ChildSDQ11",        "Peer Problems",
  "ChildBullyOthers",  "Conduct Problems",
  "ChildSDQ13",        "Emotional Problems",
  "ChildSDQ14",        "Peer Problems",
  "ChildSDQ15",        "Hyperactivity",
  "ChildSDQ16",        "Emotional Problems",
  "ChildSDQ17",        "Prosocial",
  "ChildSDQ18",        "Conduct Problems",
  "ChildBullied",      "Peer Problems",
  "ChildSCS3",         "Hyperactivity",
  "ChildSDQ22",        "Conduct Problems",
  "ChildSDQ23",        "Peer Problems",
  "ChildSDQ24",        "Emotional Problems",
  "ChildJukes10",      "Hyperactivity",
  "ChildJukes14",      "Hyperactivity"
)
reverse_items <- c(
  "ChildSCS10", "ChildSCS9", "ChildSCS8", "ChildSCS7",
  "ChildSCS6",  "ChildSCS3",
  "ChildJukes14","ChildJukes10", "ChildCBQ1"
)
#reverse_items<- c("ChildSDQ11", "ChildSDQ14", "ChildSDQ17") already reversed

extra_rows <- caregiver_data %>%
  filter(variable %in% item_map$variable) %>%
  mutate(form_construct = "SDQ") %>%
  select(site, user_id, child_id, variable, value, form_construct) %>%
  group_by(site, form_construct, user_id, child_id, variable) %>%
  filter(n() == 1) %>%
  ungroup() %>%
  nest(data = c(user_id, child_id, variable, value)) %>%
  mutate(df_vals = map(data, function(df) {
    df_wide <- df %>%
      pivot_wider(names_from = variable, values_from = value)
    
    # reverse items
    for (item in reverse_items) {
      new_name <- paste0(item, "_r")
      df_wide[[new_name]] <- 3 - df_wide[[item]]
    }
    
    df_wide <- df_wide %>%
      select(-all_of(reverse_items))
    
    df_wide
  }))

caregiver_tidy <- bind_rows(caregiver_tidy, extra_rows)

```



### Select & scale data

```{R}
### since number of sample size is too low for ca_pilot
### currently we focus on co_pilot and de_pilot

# combine co_bogota	and	co_rural for enough sample sizes
caregiver_tidy <- caregiver_tidy %>%
  mutate(df_scaled = map(df_vals, ~ {
    .x %>%
      select(-user_id, -child_id) %>%
      scale(center = TRUE, scale = TRUE) %>%
      as.data.frame()
  }))



caregiver_tidy$fscore <- vector("list", nrow(caregiver_tidy))
```




## EFA Analysis and Loading Matrix Plot


### Parenting

Determine the number of factors
```{r}
formi = "Parenting"
remove_items = c("SelfParentStressNSCHh8", paste0("SelfSupport", c(1:12)))
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
  }
  cat(sitei)
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]
  
  
  subconstruct <- subconstruct[, !colnames(subconstruct) %in% remove_items]
  # remove SelfParentStressNSCHh8 variable since it contains too much missing values and fails the parallel analysis 
  # unique in prolific data

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```



EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_bogota_rural = 3,
  de_leipzig = 3,
  prolific = 3
)

efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors) 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), plot = combined_plot, width = 8, height = 8, dpi = 300)
```



### SDQ

Determine the number of factors
```{r}
formi = "SDQ"
remove_items = NULL
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
  }
  cat(sitei)
  
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
      pull(df_scaled)  %>% .[[1]]
  
  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```

EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_bogota_rural = 3,
  de_leipzig = 3,
  prolific = 3
)


efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors) 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), width = 6, height = 6, dpi = 300)
```







### Executive Function

Determine the number of factors
```{r}
formi = "Executive Function"
remove_items = NULL
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
  }
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```

EFA analysis and Save factor scores

```{r}
nfactors <- c(
  co_bogota_rural = 3,
  de_leipzig = 3,
  prolific = 3
)

efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors) 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)
```







### Social Emotional

Determine the number of factors

#### ChildJukes
```{r}
formi = "Social Emotional"
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
  }
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]
  
  remove_items = names(subconstruct)[!grepl("Jukes", names(subconstruct))]
  subconstruct <- subconstruct[, grepl("Jukes", names(subconstruct))]
  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", "ChildJukes"))
}

```

```{r}
nfactors <- c(
  co_bogota_rural = 2,
  de_leipzig = 2,
  prolific = 2
)

efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors, plot_title = "ChildJukes") 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", "ChildJukes", ".png")), width = 8, height = 8, dpi = 300)
```




#### other variables


```{r}
formi = "Social Emotional"
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
    }
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  remove_items = names(subconstruct)[grepl("Jukes", names(subconstruct))]
  subconstruct <- subconstruct[, !grepl("Jukes", names(subconstruct))]
  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}


```




EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_bogota_rural = 2,
  de_leipzig = 2,
  prolific = 2
)

efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors) 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)
```



### Caregiver Well-being

Determine the number of factors
```{r}
formi = "Caregiver Well-Being"
for(sitei in sites){
  if(nrow(filter(caregiver_tidy, form_construct == formi, site == sitei)) == 0){         
    cat(sitei, ": no data\n")         
    next      
    }
  subconstruct = caregiver_tidy %>% filter(form_construct == formi, site == sitei) |> 
  pull(df_scaled)  %>% .[[1]]

  # Parallel analysis
  fa.parallel(subconstruct, fa="both", n.iter=100, plot=FALSE)
  
  # Scree plot
  scree(subconstruct, factors=TRUE, pc=F, 
        main = paste0(sitei, ": ", formi))
}
```


EFA analysis and Save factor scores
```{r}
nfactors <- c(
  co_bogota_rural = 3,
  de_leipzig = 3,
  prolific = 3
)

efa_plot_fscore <- run_efa_plot(caregiver_tidy, formi, remove_items, sites, nfactors) 
caregiver_tidy <- efa_plot_fscore$data

combined_plot <- efa_plot_fscore$plot
#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), width = 8, height = 8, dpi = 300)
```
