
# EFA analysis for surveys for students

## Data preparation
```{r}
source(here::here("03_summaries", "efa", "efa_helpers.R"))
survey_data_nested <- read_rds(here::here("01_fetched_data/survey_data_nested.rds"))


get_survey_data <- function(survey_data_nested, type) {
  survey_data_nested %>%
    filter(survey_type == type) %>%
    pull(data) %>%
    .[[1]] %>%
    collect()
}

#caregiver_data <- get_survey_data(survey_data_nested, "caregiver")
#teacher_data   <- get_survey_data(survey_data_nested, "teacher")
student_data   <- get_survey_data(survey_data_nested, "student")


student_tidy <- student_data %>%
  select(site, user_id, child_id, variable, value, form_construct) %>%
  filter(!is.na(form_construct),
         !is.na(value),
         form_construct != 'Safety') %>%
  group_by(site, form_construct, user_id, child_id, variable) %>%
  filter(n() == 1) %>%  # remove duplicate responses
  ungroup() %>%
  nest(data = c(user_id, child_id, variable, value)) %>%
  mutate(df_vals = map(data, function(df) {
    df %>%
      pivot_wider(
        names_from = variable,
        values_from = value
      )
  }))



constructs = as.vector(unique(student_tidy$form_construct))
sites = as.vector(unique(student_tidy$site))


cat('sample size\n')
for(i in sites){
  cat(i)
  cat('\t')
  selected_site <- student_tidy |>
    filter(site == i) 
  cat(nrow(selected_site[['df_vals']][[1]]))
  cat('\t')
}

### since number of sample size is too low for ca_pilot
### currently we focus on co_pilot and de_pilot
student_tidy <- student_tidy %>%
  filter(site != 'ca_pilot') %>%
  mutate(df_scaled = map(df_vals, ~ {
    .x %>%
      select(-user_id, -child_id) %>%
      scale(center = TRUE, scale = TRUE) %>%
      as.data.frame()
  }))


sites = sites[sites != "ca_pilot"]

student_tidy$fscore <- vector("list", nrow(student_tidy))
```


## Correlation Heatmap
```{r}

for(formi in constructs){
  for(sitei in unique(pull(student_tidy, site))){
  
    subconstruct <- student_tidy %>%
      filter(form_construct == formi, site == sitei) |> pull(df_scaled)  %>% .[[1]]
    
    cor_matrix <- cor(subconstruct, use = "pairwise.complete.obs")

    corrplot(cor_matrix, method = "color", col = col, type = "upper", order = "original",
            tl.pos = "l", 
            tl.col = "black", 
            title =  paste0(sitei, ":", formi), 
            is.corr = FALSE,
            mar=c(0,0,2,0),
            col.lim = c(-1, 1)) 
}
}

```



## EFA Analysis and Loading Matrix Plot


```{r}
#All surveys fit a one-factor model based on the scree plot and parallel analysis. Theoretically, surveys with four or fewer items cannot support a two-factor model due to insufficient degrees of freedom. Therefore, I simplified the code by fixing the number of factors to one across all cases.
for(formi in constructs){
  for(sitei in unique(pull(student_tidy, site))){
  # data preparation
  row_index <- which(student_tidy$form_construct == formi & student_tidy$site == sitei)
  ids <- student_tidy$df_vals[[row_index]] %>% 
      select(user_id, child_id) 
    
  subconstruct = student_tidy$df_scaled[[row_index]]
  # efa
  EFAresult = factanal(~ ., data=subconstruct, factors = 1, scores = "regression",
    rotation = "promax", na.action = na.exclude)
  loadings_df <- loadmax(EFAresult$loadings, subconstruct)
  
  # loading plot
  assign(paste0("p_", sitei), plot_load(loadings_df, paste0(sitei)))
  
  # save factor scores
  scores_df <- as.data.frame(EFAresult$scores)
  colnames(scores_df) <- paste0(formi, 1:ncol(scores_df))
  student_tidy$fscore[[row_index]] <- bind_cols(ids, scores_df)
}


# combined_load_plot
p_co_pilot <- p_co_pilot + theme(legend.position = "none")

plot_combined <- p_co_pilot + p_de_pilot +
  plot_layout(ncol = 2, widths = c(1, 1)) &
  plot_annotation(
    title = formi,
    theme = theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
  )

print(plot_combined)


#ggsave(here::here(paste0("03_summaries/efa/fig/", gsub("[/\"']", "_", formi), ".png")), width = 5, height = 3, dpi = 300)
}
```

# save factor scores

```{r}

student_fscore_long <- student_tidy %>%
  dplyr::filter(!purrr::map_lgl(fscore, is.null)) %>%
  purrr::pmap_dfr(function(site, form_construct, ..., fscore) {
    # Extract only user_id and first factor column
    factor_col <- setdiff(colnames(fscore), c("user_id", "child_id"))
    
    tibble::tibble(
      site = site,
      user_id = fscore$user_id,
      form_construct = form_construct,
      score = fscore[[factor_col]]
    )
  })

#saveRDS(student_fscore_long, here::here("03_summaries/efa/student_fscore.rds"))
```
