---
title: "lang_lit_efa"
format: html
editor: visual
---


Helper functions

```{r}
#| echo: false

source(here("02_score_data","irt_helpers.R"))
source(here::here("plot_settings.R"))
source(here("03_explore_tasks/explore_helper.R"))

```

Load data

```{r}
# load vocab and trog
lang_lit <- load_task_data(c("vocab", "trog"))
lang_lit
                  
# load sre and swr (ROAR)
task_data_nested <- read_rds(here(glue("01_fetched_data/task_data_nested.rds")))

task_data_combined <- task_data_nested |>
  mutate(data = map2(task_id, data, rescore_hf)) |>
  unnest(data)

#sre
sre <- task_data_combined |>
  filter(str_detect(task_id, "sre")) |>
  mutate(item_num = as.numeric(str_extract(item_uid, "[:digit:]+")), 
         ai = str_detect(item_uid, "ai"))
colnames(sre)

#swr
swr <- task_data_combined |>
  filter(str_detect(task_id, "swr")) |>
  mutate(item_num = as.numeric(str_extract(item_uid, "[:digit:]+")), 
         ai = str_detect(item_uid, "ai"))

```

Compute raw accuracy

```{r}
# trog and vocab
lang_lit_scores <- lang_lit |>
  group_by(user_id, site, task_id) |>
  summarise(accuracy = mean(correct, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = task_id, values_from = accuracy) |>
  janitor::clean_names()

# SRE and SWR
sre_scores <- sre |>
  group_by(user_id, site) |>
  summarise(sre = mean(correct, na.rm = TRUE), .groups = "drop")

swr_scores <- swr |>
  group_by(user_id, site) |>
  summarise(swr = mean(correct, na.rm = TRUE), .groups = "drop")

ages <- run_ages |> 
  select(user_id, site, age)  

# Join all scores together
lang_lit_full <- lang_lit_scores |>
  left_join(sre_scores, by = c("user_id", "site")) |>
  left_join(swr_scores, by = c("user_id", "site")) |>
  left_join(ages |> select(user_id, site, age), by = c("user_id", "site"))

lang_lit_full |> summarise(n = n(), with_age = sum(!is.na(age)))
lang_lit_scores |> count(site)
ages |> count(site)


```

EFA #2

Have to use raw accuracy scores because I don't have IRT scores for sre and swr

```{r}

install.packages("naniar")
library(naniar) 

# plot missingness
vis_miss(lang_lit_full[, c("trog", "vocab", "sre", "swr")])

# vount complete cases
lang_lit_full |> 
  summarise(n = n(), complete_cases = sum(complete.cases(trog, vocab, sre, swr)))

# Check na's per column
lang_lit_full |>
  select(trog, vocab, sre, swr) |>
  summarise(across(everything(), ~ sum(is.na(.))))

# EFA data and model
efa_data <- lang_lit_full |>
  select(trog, vocab, sre, swr) |>
  na.omit()

efa_result <- fa(efa_data, nfactors = 1, rotate = "none", fm = "ml")
print(efa_result)

# Scree
fa.parallel(efa_data, fa = "fa")

```

CFA to confirm one factor structure 

```{r}
library(lavaan)
cfa_model <- "
  ll =~ trog + vocab + sre + swr
  ll ~ age
"

# Prep data
lang_lit_cfa <- lang_lit_full |>
  select(trog, vocab, sre, swr, age) |>
  na.omit()

# Fit cfa
fit_cfa <- cfa(
  model = cfa_model,
  data = lang_lit_cfa,
  std.lv = TRUE
)

# Summarise
summary(fit_cfa, fit.measures = TRUE, standardized = TRUE)

# Plot


```

EFA for trog and vocab only

```{r}
multigroup_scores <- readRDS(here("02_scoring_outputs", "scores", "scores_multigroup.rds"))

names(multigroup_scores)
# Check tasks
multigroup_scores |> 
  distinct(task_id) |> 
  arrange(task_id) |> 
  View()

```

```{r}
library(janitor)
library(lavaan)

ll_scores <- filter(multigroup_scores, 
                    task_id %in% c("trog", "vocab"))  

ll_scores_irt <- ll_scores |>
  select(site, task_id, metric_value, user_id) |>
  pivot_wider(
    names_from = "task_id", 
    values_from = "metric_value", 
    id_cols = c("user_id", "site")
  ) |>
  janitor::clean_names() |>
  mutate(
    across(c(trog, vocab), ~ scale(.x)[, 1])
  )

# Add age
run_ages <- run_ages |>
  mutate(site = case_when(
    site == "1" ~ "ca_pilot",
    site == "2" ~ "co_pilot",
    site == "3" ~ "de_pilot",
    TRUE ~ site  # fallback
  ))

# Ensure one row per user_id and site
ages <- multigroup_scores |>
  select(site, run_id, user_id) |>
  distinct() |>
  left_join(run_ages, by = c("user_id", "site")) |>
  distinct(user_id, site, .keep_all = TRUE) 

# Join age into the IRT scores table
ll_scores_irt <- ll_scores_irt |>
  left_join(ages |> select(user_id, site, age), by = c("user_id", "site"))

```

EFA

```{r}
cfa_model <-  "
ll =~ trog + vocab 
ll ~ age
"

fit <- cfa(cfa_model, ll_scores_irt, std.lv=TRUE, missing='fiml')
summary(fit, fit.measures=TRUE, standardize=TRUE)

semPaths(
  fit,
  what = "std",
  layout = "tree",
  edge.label.cex = 1.2,
  sizeMan = 8,
  sizeLat = 8,
  residuals = TRUE,
  intercepts = FALSE,
  title = FALSE,
  style = "lisrel",
  edge.color = "black",
  residual.color = "darkred",
  mar = c(4, 4, 4, 4),
  edge.width = 1,
  fade = FALSE,
  asize = 2                 
)

```

```{r}

```

```{r}

```

```{r}

```




















