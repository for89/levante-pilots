---
title: "lang_lit_efa"
format: html
---

Helper functions

```{r setup}
library(tidyverse)
library(here)
library(glue)
library(lavaan)
library(tidySEM)
library(ggthemes)
library(psych)

source(here("03_summaries/plotting_helper.R"))
source(here("03_summaries/scores_helper.R"))
```

Load thetas

```{r}
sites <- c("ca_pilot", "co_pilot", "de_pilot")

task_scores <- read_rds(here("02_scoring_outputs","scores",
                             "multigroup_scores.rds"))  |>
  bind_rows(read_rds(here("02_scoring_outputs","scores",
                          "scores_general.rds")))  |>
  bind_rows(read_rds(here("02_scoring_outputs","scores",
                          "roar_thetas.rds"))) |>
  bind_rows(read_rds(here("02_scoring_outputs","scores",
                          "sumscores.rds")) |>
              filter(item_task == "pa")) |>
  filter(site %in% sites)

table(task_scores$item_task)

```

Get ages

```{r}
run_ages <- read_rds(here(glue("01_fetched_data/run_data.rds"))) |>
  select(site, task_id, user_id, run_id, age) |>
  filter(site %in% sites)
```

Clean lang/literacy tasks

```{r}

task_scores |> count(item_task)

# Combine variants 
cleaned_scores <- task_scores |>
  mutate(task_clean = case_when(
    item_task %in% c("sre", "sre-de", "sre-es") ~ "sre",
    item_task %in% c("swr", "swr-de", "swr-es") ~ "swr",
    item_task %in% c("pa", "pa-es") ~ "pa",
    item_task == "trog" ~ "trog",
    item_task == "vocab" ~ "vocab",
    TRUE ~ NA_character_
  )) |>
  filter(!is.na(task_clean))# keeping only the lang/lit scores 

# Count unique users 
cleaned_scores |>
  distinct(task_clean, user_id) |>
  count(task_clean, name = "n_unique_users") |>
  arrange(desc(n_unique_users))

```

Corr matrix

```{r}
efa_matrix <- cleaned_scores |>
  select(user_id, task_clean, metric_value) |>
  group_by(user_id, task_clean) |>
  summarise(score = mean(metric_value, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = task_clean, values_from = score)

# drop user_id and make sure data is numeric
efa_data <- efa_matrix |>
  select(-user_id) |>
  mutate(across(everything(), as.numeric))

glimpse(efa_matrix)

```

EFA

```{r}
# Run parallel analysis and EFA
fa.parallel(efa_data, fa = "fa", use = "pairwise")

efa_1f <- fa(efa_data, nfactors = 1, fm = "ml", rotate = "none", use = "pairwise")
efa_2f <- fa(efa_data, nfactors = 2, fm = "ml", rotate = "oblimin", use = "pairwise")

```

Factor loadings

```{r}
loadings_1f <- as.data.frame(efa_1f$loadings[1:5, 1]) |> 
  tibble::rownames_to_column("task") |> 
  rename(loading = 2) |> 
  mutate(model = "1-Factor")

loadings_2f <- as.data.frame(unclass(efa_2f$loadings)[1:5, ]) |> 
  tibble::rownames_to_column("task") |> 
  pivot_longer(cols = starts_with("ML"), names_to = "factor", values_to = "loading") |> 
  mutate(model = "2-Factor")

# combine for plotting
plot_data <- bind_rows(
  loadings_1f |> mutate(factor = "Factor 1"),
  loadings_2f
)

# plot
ggplot(plot_data, aes(x = loading, y = task, fill = factor)) +
  geom_col(position = position_dodge(width = 0.7)) +
  facet_wrap(~model) +
  labs(title = "Factor Loadings Comparison", x = "Loading", y = "Task")

# get better plot

```

Get fit indices using lavaan

```{r}

# 1-factor model: all tasks load on a single factor
model_1f <- '
lang_comp =~ trog + vocab + swr + sre + pa
'

# 2-factor model: language vs. reading skills
model_2f <- '
lang_comprehension =~ trog + vocab
reading =~ swr + sre + pa
'

# fit models with fiml for missing data 
fit_1f <- cfa(model_1f, data = efa_data, missing = "fiml", estimator = "MLR")
fit_2f <- cfa(model_2f, data = efa_data, missing = "fiml", estimator = "MLR")

# check missingness
lavInspect(fit_1f, "coverage") #fewer than 10% with (trog x pa), (vocab x pa), (sre x pa)

# Summary with fit indices
summary(fit_1f, fit.measures = TRUE, standardized = TRUE)
summary(fit_2f, fit.measures = TRUE, standardized = TRUE)

# Compare models directly
anova(fit_1f, fit_2f)

```

Create table

```{r}
get_fit <- function(fit) {
  fitMeasures(fit, c("chisq", "df", "pvalue", "cfi", "tli", "rmsea", "srmr"))
}

fit_table <- bind_rows(
  one_factor = get_fit(fit_1f),
  two_factor = get_fit(fit_2f),
  .id = "model"
)

fit_table

```

Path diagram

```{r, height = 12, width = 10}
library(semPlot)

semPaths(
  fit_1f,
  what = "std",
  layout = "tree",
  edge.label.cex = 1.2,
  sizeMan = 6,
  sizeLat = 10,
  label.cex = 1.1,
  fade = FALSE,
  residuals = TRUE,
  intercepts = FALSE,
  edge.color = "black",
  edge.width = 1,
  style = "ram",
  nCharNodes = 0,
  mar = c(4, 4, 6, 4)  # <- more top space
)


```

```{r}
# 2 factor
# output file path
out_path <- here("03_summaries", "sem_plot_2factor.png")

# open PNG graphics device
png(filename = out_path, width = 1200, height = 800, res = 150)

# SEM diagram
semPaths(
  fit_2f,
  what = "std",
  layout = "tree",
  edge.label.cex = 1.2,
  sizeMan = 6,
  sizeLat = 8,
  label.cex = 1.2,
  fade = FALSE,
  residuals = TRUE,
  intercepts = FALSE,
  style = "ram",
  edge.width = 0.3,
  nCharNodes = 0,
  mar = c(4, 4, 6, 4),
  nodeLabels = c(
    "TROG", "VOCAB", "SWR", "SRE", "PA", 
    "Lang\nComprehension", "Reading Skills"
  ),
  edge.color = c(
    "steelblue", "steelblue",             # to lang_comprehension
    "darkgreen", "darkgreen", "darkgreen",# to reading
    "black",                              # latent correlation
    rep("black", 7)                       # residuals (5 obs + 2 latent)
  )
)

# close the device to save the file
dev.off()




```

```

```{r, eval = FALSE, echo = FALSE}

# old
Load data for trog and vocab only

library(janitor)
library(lavaan)

ll_scores <- filter(multigroup_scores, 
                    task_id %in% c("trog", "vocab"))  

ll_scores_irt <- ll_scores |>
  select(site, task_id, metric_value, user_id) |>
  pivot_wider(
    names_from = "task_id", 
    values_from = "metric_value", 
    id_cols = c("user_id", "site")
  ) |>
  janitor::clean_names() |>
  mutate(
    across(c(trog, vocab), ~ scale(.x)[, 1])
  )

# Add age
run_ages <- run_ages |>
  mutate(site = case_when(
    site == "1" ~ "ca_pilot",
    site == "2" ~ "co_pilot",
    site == "3" ~ "de_pilot",
    TRUE ~ site  # fallback
  ))

# Ensure one row per user_id and site
ages <- multigroup_scores |>
  select(site, run_id, user_id) |>
  distinct() |>
  left_join(run_ages, by = c("user_id", "site")) |>
  distinct(user_id, site, .keep_all = TRUE) 

# Join age into the IRT scores table
ll_scores_irt <- ll_scores_irt |>
  left_join(ages |> select(user_id, site, age), by = c("user_id", "site"))

```

EFA

```{r, eval = FALSE, echo = FALSE}


cfa_model <-  "
ll =~ trog + vocab 
ll ~ age
"

fit <- cfa(cfa_model, ll_scores_irt, std.lv=TRUE, missing='fiml')
summary(fit, fit.measures=TRUE, standardize=TRUE)

semPaths(
  fit,
  what = "std",
  layout = "tree",
  edge.label.cex = 1.2,
  sizeMan = 8,
  sizeLat = 8,
  residuals = TRUE,
  intercepts = FALSE,
  title = FALSE,
  style = "lisrel",
  edge.color = "black",
  residual.color = "darkred",
  mar = c(4, 4, 4, 4),
  edge.width = 1,
  fade = FALSE,
  asize = 2                 
)

```

```{r}

```

```{r}

```
