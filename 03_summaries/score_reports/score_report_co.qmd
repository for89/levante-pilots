---
title: Score Reports
date: January 22, 2025
author: LEVANTE DCC Team
format: 
  html:
    toc: true
    code-fold: true
---

```{r libraries}
library(tidyverse)
library(here)
library(glue)
library(ggforce)
library(ggthemes)
source(here("03_summaries", "plotting_helper.R"))
```


```{r}
sites <- c("co_pilot")

participant_runs <- read_rds(here("00_prepped_data","co_pilot","participants.rds")) |>
  unnest(ages) |>
  unnest(groups) |>
  rename(group_name = name)

```


Combine all task scores into one plot!

```{r}
score_files <- list.files(here("02_scored_data"), pattern = "*.rds",
                          full.names = TRUE)
score_list <- score_files |> map(read_rds)
# exclude_tasks <- c("hostile-attribution", "pa-es")
# score_list <- read_rds("scores/combined_scores.rds")
```

```{r}
participants_info <- participant_runs |>
  mutate(school = group_name |> gsub(pattern="Coleg", replacement="Col") |> str_extract("Col.")) |>
  group_by(user_id) |>
  select(user_id, school, grade, age, sex, teacher_id) |>
  mutate(age = round(age, 1)) |>
  rename(db_grade = grade) |>
  distinct()
```

Merge in grade info. Note 1000 is used for missing in Year/Month data. 

```{r}
grade_info <- read_csv(here("03_summaries","score_reports","data_co","grade_info_co.csv")) |>
  janitor::clean_names() |>
  mutate(month = ifelse(year == 1000, NA, month), 
         year = ifelse(year == 1000, NA, year), 
         school = group |> gsub(pattern="Coleg", replacement="Col") |> str_extract("Col.")) |>
  rename(user_id = uid) |>
  mutate(approx_age = as.numeric(ym("2024-06") - ym(paste(year, month)))/365) |>
  select(user_id, school, grade, year, month, approx_age) 

participants <- left_join(participants_info, grade_info)
```



```{r setup}
unique(participants$school)
unique(participants$grade)
```

## Students per school and grade/age

```{r}
table(participants$school, participants$grade)
table(participants$school, round(participants$age))
```

# Load all scores

```{r}
all_scores <- score_list |>
  bind_rows() |>
  rename(task = task_id) |>
  left_join(participants) |>
  filter(!is.na(age), age >= 5, age <= 12) 

scores <- all_scores |>
  mutate(metric_type = if_else(str_detect(metric_type, "ability"), "ability", metric_type)) |>
  filter(!is.na(metric_value)) |>
  inner_join(task_metrics) |>
  left_join(task_categories) |>
  mutate(score = metric_value)

task_categories_vec <- levels(scores$task_category)
task_pal <- ptol_pal()(length(task_categories_vec)) |> set_names(task_categories_vec)

```


Scores with missing grade info.

```{r}
scores |>
  group_by(task) |> 
  filter(grade == "") |>
  count()
```

# Distributions across all schools

```{r}
dist_all_schools <- scores |> 
  group_by(task_category, task) |>
  summarise(n = n(), Mean = mean(score), 
            Median = median(score), SD = sd(score)) |>
  rename(c("Category"="task_category", "Task"="task"))

dist_all_schools
```

All scores combining all schools in one plot
```{r}
ggplot(scores, aes(x = "", y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 2,
                           nest_line = element_line(), solo_line = TRUE,
                           axes = "x",scales = "free_y") +
  geom_sina(aes(colour = task_category), alpha = 0.8) +
  scale_colour_manual(values = task_pal) +
  labs(y = "Score") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 10))

ggsave("plots_co/all_scores_all_schools.png", width = 14, height = 8)
```

Just math and reading
```{r}
ggplot(scores |> filter(task_category %in% c("Math", "Reading")), 
       aes(x = "", y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 1,
                           nest_line = element_line(), solo_line = TRUE,
                           axes = "x",scales = "free_y") +
  geom_sina(aes(colour = task_category), alpha = 0.8) +
  scale_colour_manual(values = task_pal) +
  labs(y = "Score") +
  guides(colour = "none") +
  theme(axis.ticks.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 15))
ggsave("plots/reports/math_read_all_schools.png", width = 14, height = 8)
```

# Distributions by school

```{r}
dist_by_school <- scores |> 
  group_by(school, task_category, task) |>
  summarise(n = n(), Mean = mean(score), 
            Median = median(score), SD = sd(score)) |>
  rename(c("Category"="task_category", "Task"="task"))

dist_by_school
```

All scores, sina plots

```{r}
ggplot(scores, aes(x = school, y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 2,
                           nest_line = element_line(), solo_line = TRUE,
                           axes = "x",scales = "free_y") +
  geom_sina(aes(color = task_category), alpha = 0.8) + 
  scale_color_manual(values = task_pal) +
  labs(x="School", y = "Score") +
  guides(color = "none") +
  theme(strip.text = element_text(size = 10))

ggsave("plots/reports/all_scores_by_school_sina.png", width = 14, height = 8)
```

All scores, violin plots

```{r}
ggplot(scores, aes(x = school, y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 2,
                           nest_line = element_line(), solo_line = TRUE,
                           axes = "x",scales = "free_y") +
  geom_violin(trim = F, aes(fill = task_category), alpha = 0.8) + 
  geom_boxplot(width=0.1) +
  scale_fill_manual(values = task_pal) +
  labs(x="School", y = "Score") +
  guides(fill = "none") +
  theme(strip.text = element_text(size = 10))

ggsave("plots/reports/all_scores_by_school_violin.png", width = 14, height = 8)
```

All scores, one school on one plot

```{r}
school_plot <- function(sch) {
  scores |> filter(school==sch) |> group_by(task) |>
    mutate(n = n_distinct(user_id), task_label = glue("{task}\n(n = {n})")) |>
    ungroup() |>
    ggplot(aes(x = "", y = score)) +
    ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 2,
                             nest_line = element_line(), solo_line = TRUE,
                             axes = "x",scales = "free_y") +
    geom_sina(aes(colour = task_category), alpha = 0.8) +
    scale_colour_manual(values = task_pal) +
    labs(y = "Score") +
    guides(colour = "none") +
    theme(axis.ticks.x = element_blank(),
          axis.title.x = element_blank(),
          strip.text = element_text(size = 10))
}

school_plot("ColA")
# ggsave("plots_co/all_scores_schoolA.png", width = 14, height = 8)

school_plot("ColB")
# ggsave("plots_co/all_scores_schoolB.png", width = 14, height = 8)

school_plot("ColC")
# ggsave("plots_co/all_scores_schoolC.png", width = 14, height = 8)

school_plot("ColD")
# ggsave("plots_co/all_scores_schoolD.png", width = 14, height = 8)

school_plot("ColE")
# ggsave("plots_co/all_scores_schoolE.png", width = 14, height = 8)

```

Just math & reading scores, one school on one plot

```{r}
school_math_read_plot <- function(sch) {
  scores |> 
    filter(school == sch, task_category %in% c("Math", "Reading")) |> 
    group_by(task) |> 
    mutate(n = n_distinct(user_id), task_label = glue("{task}\n(n = {n})")) |>
    ungroup() |>
    ggplot(aes(x = "", y = score)) +
    ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 1,
                             nest_line = element_line(), solo_line = TRUE,
                             axes = "x",scales = "free_y") +
    geom_sina(aes(colour = task_category), alpha = 0.8) +
    scale_colour_manual(values = task_pal) +
    labs(y = "Score") +
    guides(colour = "none") +
    theme(axis.ticks.x = element_blank(),
          axis.title.x = element_blank(),
          strip.text = element_text(size = 10))
}

school_math_read_plot("ColA")
ggsave("plots_co/math_read_schoolA.png", width = 14, height = 8)

school_math_read_plot("ColB")
ggsave("plots_co/math_read_schoolB.png", width = 14, height = 8)

school_math_read_plot("ColC")
ggsave("plots_co/math_read_schoolC.png", width = 14, height = 8)

school_math_read_plot("ColD")
ggsave("plots_co/math_read_schoolD.png", width = 14, height = 8)

school_math_read_plot("ColE")
ggsave("plots_co/math_read_schoolE.png", width = 14, height = 8)
```

# Save distribution files

Combine all distributions into one csv
```{r}
dist_all_schools <- dist_all_schools |> mutate(school = "all")
all_dist <- rbind(dist_all_schools, dist_by_school)
write_csv(all_dist, "data_co/scores_summary_reports.csv")
```

Top 5% in each task from each school
```{r}
top_5_percent <- function(df) {
  threshold <- quantile(df$score, 0.95)
  return(df |> filter(score >= threshold))
}

top_5_percent_users <- scores |>
  group_by(school, task) |>
  do(top_5_percent(.)) |>
  select(school, task_category, task, user_id, score)
write_csv(top_5_percent_users, "data_co/top5perc_task_school.csv")
```

Bottom 5% in each task from each school
```{r}
bottom_5_percent <- function(df) {
  threshold <- quantile(df$score, 0.05)
  return(df |> filter(score <= threshold))
}

bottom_5_percent_users <- scores |>
  group_by(school, task) |>
  do(bottom_5_percent(.)) |>
  select(school, task_category, task, user_id, score)

write_csv(bottom_5_percent_users, "data_co/bottom5perc_task_school.csv")
```

# Percentiles across grades

> I wonder if, for example, you could send us the percentage of students per school and grade in the different terciles or quartiles of each measure. I believe differences between grades will be appreciated.

```{r}
scores |>
  filter(task %in% c("egma-math","sre-es","swr-es"), grade != "") |>
  ggplot(aes(x = grade, y = score)) +
  ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 1,
                           nest_line = element_line(), solo_line = TRUE,
                           axes = "x",scales = "free_y") +
  geom_jitter(alpha = .4, width = .2)+ 
  geom_quantile(aes(group = 1, col = factor(..quantile..)), method = "rq") + 
  labs(y = "Score", x = "Grade") +
  ggthemes::scale_color_solarized(name = "Quantile") 
```

```{r}
scores |>
  filter(task %in% c("egma-math","sre-es","swr-es"), grade != "", 
         school %in% c("ColC", "ColD")) |>
  ggplot(aes(x = grade, y = score)) +
  facet_grid(task ~ school, scales = "free_y") + 
  # ggh4x::facet_nested_grid(vars(task_category, task), nrow = 1,
  #                          nest_line = element_line(), solo_line = TRUE,
  #                          axes = "x",scales = "free_y") +
  geom_jitter(alpha = .4, width = .2)+ 
  geom_quantile(aes(group = 1, col = factor(..quantile..)), method = "rq") + 
  labs(y = "Score", x = "Grade") +
  ggthemes::scale_color_solarized(name = "Quantile") 
```



```{r}
percentile_scores <- scores |>
  group_by(task) |>
  filter(task_category %in% c("Math", "Reading"), 
         task != "pa-es",
         !is.na(grade), grade != "") |>
  mutate(percentile = cut(score, 
                          breaks = quantile(score, probs = seq(0, 1, 0.2)),
                          include.lowest = TRUE,
                          labels = c("0-20","20-40","40-60","60-80","80-100")), 
         fct_grade = as_factor(grade))

percentile_summary <- percentile_scores |>
  filter(task_category %in% c("Math", "Reading")) |>
  filter(!is.na(percentile)) |>
  group_by(task_category, task, school, fct_grade, grade, percentile) |>
  dplyr::count(.drop = FALSE) |>
  group_by(task_category, task, school, grade) |>
  mutate(proportion = n / sum(n)) |>
  select(-n) |>
  pivot_wider(names_from = "percentile", values_from = "proportion", values_fill = 0)

#   
#   ggplot(percentile_summary, aes(x = grade, y = percentile)) +
#   ggh4x::facet_nested_wrap(vars(task_category, task), nrow = 1,
#                            nest_line = element_line(), solo_line = TRUE,
#                            axes = "x",scales = "free_y") +
#   # geom_point(aes(colour = task_category), alpha = 0.8) +
#   geom_tile(aes(fill= proportion)) + 
#   # scale_colour_manual(values = task_pal) +
#   # coord_flip() + 
#   viridis::scale_fill_viridis() +
#   labs(y = "Percentile") +
#   guides(colour = "none") +
#   theme(axis.ticks.x = element_blank(),
#         axis.title.x = element_blank(),
#         strip.text = element_text(size = 10))
```

```{r}
knitr::kable(filter(percentile_summary, school == "ColB"), digits = 2)

knitr::kable(filter(percentile_summary, school == "ColC"), digits = 2)

knitr::kable(filter(percentile_summary, school == "ColD"), digits = 2)
```

