---
title: "Age trends"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
library(here)
library(glue)
library(lavaan)
library(tidySEM)
library(ggthemes)
library(tidyr)
library(knitr)

source(here("02_score_data","irt_helpers.R"))
source(here("03_summaries", "plotting_helper.R"))
source(here("03_explore_tasks/explore_helper.R"))
```

load thetas for 9 core tasks (not ROAR, mefs or ha)

```{r}

### new, aug 11
task_scores <- read_rds(here("02_scoring_outputs","scores",
                              "scores_combined.rds"))

colnames(task_scores)
glimpse(task_scores)
unique(task_scores$item_task)
unique (task_scores$site)


# define tasks 
tasks <- c("hf", "math", "matrix", "mg", "mrot", "sds", "tom", "trog", "vocab")


```

missingness for age var

```{r}
sum(is.na(run_ages$age)) #total missing values
mean(is.na(run_ages$age)) * 100 # %missing

task_scores %>%
  group_by(site) %>%
  summarise(
    n = n(),
    missing_age = sum(is.na(age)),
    perc_missing = mean(is.na(age)) * 100
  )

```

Plot

```{r}

library(dplyr)
library(ggplot2)

tasks <- c("hf", "math", "matrix", "mg", "mrot", "sds", "tom", "trog", "vocab")

dev <- task_scores %>%
  filter(
    metric_type == "ability",
    item_task %in% tasks,
    !is.na(age), !is.na(metric_value)
  ) %>%
  arrange(user_id, item_task, time_started) %>%   # first run comes first
  group_by(user_id, item_task) %>%
  slice_head(n = 1) %>%                           # take the first run
  ungroup() %>%
  mutate(item_task = factor(item_task, levels = tasks)) %>%
  transmute(user_id, item_task, site, age, ability = metric_value) %>%
  group_by(item_task) %>%
  mutate(ability_z = as.numeric(scale(ability))) %>%
  ungroup()

ability_age <- ggplot(dev, aes(x = age, y = ability_z)) +
  geom_point(alpha = 0.3, size = 0.8) +
  geom_smooth(method = "loess", se = TRUE, colour = "blue") +
  facet_wrap(~ item_task, scales = "free_y") +
  labs(
    title = "Ability vs. Age across Tasks",
    x = "Age (years)", 
    y = "Ability (Theta, model specific)") 
ability_age

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "ability_age.png"),
  plot = ability_age,
  width = 10,
  height = 6,
  dpi = 300
)

```

by site

```{r}

library(dplyr)
library(ggplot2)

# counts per site (unique users and total rows)
site_counts <- dev %>%
  group_by(site) %>%
  summarise(n_users = n_distinct(user_id), n_obs = n(), .groups = "drop")

# label vector: names must match levels of `site`
site_labels <- setNames(
  paste0(site_counts$site, " (n=", site_counts$n_users, ")"),
  site_counts$site
)

ability_age_site <- ggplot(dev, aes(x = age, y = ability_z, colour = site)) +
  geom_point(alpha = 0.3, size = 0.8) +
  geom_smooth(method = "loess", se = TRUE) +
  facet_wrap(~ item_task, scales = "free_y") +
  labs(
    title = "Ability vs. Age by Site and Task",
    x = "Age (years)",
    y = "Ability (Theta, model specific)",
    colour = "Site"
  ) +
  scale_colour_discrete(labels = site_labels)

ability_age_site

# is the rural sample older than the younger sample or outlier?

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "ability_age_site.png"),
  plot = ability_age_site,
  width = 10,
  height = 6,
  dpi = 300
)



```

Quantifying slope differences - start here- 12.08.2025

```{r}
library(broom)

slopes <- plot_data |>
  group_by(task, site) |>
  do(tidy(lm(ability ~ age, data = .))) |>
  filter(term == "age") |>
  select(task, site, estimate, std.error, p.value)

slopes

library(ggplot2)
library(dplyr)

# Create 95% confidence intervals
slopes <- slopes |>
  mutate(
    lower = estimate - 1.96 * std.error,
    upper = estimate + 1.96 * std.error,
    label = paste(task, site, sep = " - ")
  )

# Plot
dev_trends <- ggplot(slopes, aes(x = estimate, y = site)) +
  geom_point() +
  geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed", colour = "grey50") +
  facet_wrap(~ task, scales = "free_y") +
  labs(
    title = "Developmental Sensitivity by Task and Site",
    caption = "Ca: n = 119; Co: n = 743; De: n = 374",
    x = "Slope of Ability ~ Age",
    y = NULL
  )
dev_trends

```

highlight non significant points

```{r}
slopes <- slopes |>
  mutate(
    sig = ifelse(lower > 0 | upper < 0, "Significant", "Not significant")
  )

slopes_graph <- ggplot(slopes, aes(x = estimate, y = site, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed", colour = "grey50") +
  facet_wrap(~ task, scales = "free_y") +
  scale_color_manual(values = c("Significant" = "blue", "Not significant" = "red")) +
  labs(
    title = "Developmental Sensitivity by Task and Site",
    caption = "Ca: n = 119; Co: n = 743; De: n = 374",
    x = "Slope of Ability ~ Age",
    y = NULL,
    color = "Significance"
  ) 

slopes_graph

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "slopes_graph.png"),
  plot = slopes_graph,
  width = 10,
  height = 6,
  dpi = 300
)


```

does the factor structure change by age?

```{r}

# long to wide â€” one row per participant, one column per task
scores_wide <- multigroup |>
  group_by(user_id, site, item_task) |>
  summarise(metric_value = mean(metric_value, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = item_task, values_from = metric_value)

# clean names and join age 
scores_wide_mat <- scores_wide |>
  janitor::clean_names() |>
  left_join(ages, by = "user_id")

# define model
model_1 <- '
EF =~ hf + mg + sds
Reasoning =~ matrix + mrot + math
Lang =~ trog + vocab
Social_cog =~ tom
'

fit_1 <- cfa(model_1, data = scores_wide_mat,
              std.lv = TRUE, missing = "fiml",
              bounds = list(lower = 0.001)) # included to avoid heywood cases

summary(fit_1, fit.measures = TRUE, standardize = TRUE)

```

Examine factor structure in younger and older age groups (split by median)

```{r}

# what is the median age?
median_age <- median(scores_wide_mat$age, na.rm = TRUE)
median_age

# Summary statistics for the age variable
age_summary <- summary(scores_wide_mat$age)

# Minimum, maximum, and IQR
min_age <- min(scores_wide_mat$age, na.rm = TRUE)
max_age <- max(scores_wide_mat$age, na.rm = TRUE)
iqr_age <- IQR(scores_wide_mat$age, na.rm = TRUE)

# Output the results
min_age
max_age
iqr_age

library(ggplot2)

# Create a histogram of the age variable
age_dist <- ggplot(scores_wide_mat, aes(x = age)) +
  geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
  labs(title = "Distribution of Age", x = "Age", y = "Frequency") 

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "age_dist.png"),
  plot = age_dist,
  width = 10,
  height = 6,
  dpi = 300
)


```

```{r}

scores_wide_mat <- scores_wide_mat |> 
  mutate(age_group = if_else(age <= median(age, na.rm = TRUE), "younger", "older"))
table(scores_wide_mat$age_group) #551 older; 552 younger

# define model
model_2 <- '
EF =~ hf + mg + sds
Reasoning =~ math + matrix + mrot
Lang =~ trog + vocab
Social_cog =~ tom
'

# multigroup cfa to check if factor structure and covariances differ by age
fit_age_group <- cfa(model_2, 
                     data = scores_wide_mat |> filter(!is.na(age_group)),
                     group = "age_group",
                     std.lv = TRUE, 
                     missing = "fiml",
                     fixed.x = FALSE)

fitMeasures(fit_age_group, c("cfi", "rmsea", "srmr", "aic", "bic"))

summary (fit_age_group, fit.measures = TRUE, standardized = TRUE)

# warning 1: how many participants are missing age
sum(is.na(scores_wide_mat$age))

# warning 2: look at the factor covariance matrix
lavInspect(fit_age_group, "cov.lv")[[1]]  # younger
lavInspect(fit_age_group, "cov.lv")[[2]]  # older


# Covariances are all very high >1 suggesting implausibly strong or indistinguishable constructs for the younger age group
```

diagram, younger

```{r}

# Filter data for the younger group
younger_data <- scores_wide_mat |> filter(age_group == "younger")

# Define layout for the younger group
layout_younger <- matrix(nrow = 5, ncol = 12, byrow = TRUE, data = c(
  "hf", "mg", "sds", NA,"matrix", "mrot", "math", NA, "trog", "vocab", NA, "tom",
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
  "EF", NA, NA, "Reasoning", NA, NA, "Lang", NA, NA, "Social_cog", NA, NA,
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA
))

# Fit model for the younger group
fit_younger <- cfa(model_2, 
                   data = younger_data, 
                   std.lv = TRUE, 
                   missing = "fiml", 
                   fixed.x = FALSE)

# Generate graph for the younger group
structure_y <- graph_sem(fit_younger, layout = layout_younger, text_size = 2.5)
structure_y

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "structure_y.png"),
  plot = structure_y,
  width = 10,
  height = 6,
  dpi = 300
)


```

diagram, older

```{r}

# Filter data for the older group
older_data <- scores_wide_mat |> filter(age_group == "older")

# Define layout for the older group
layout_older <- matrix(nrow = 5, ncol = 12, byrow = TRUE, data = c(
  "hf", "mg", "sds", NA,"matrix", "mrot", "math", NA, "trog", "vocab", NA, "tom",
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 
  "EF", NA, NA, "Reasoning", NA, NA, "Lang", NA, NA, "Social_cog", NA, NA,
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
  NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA
))

# Fit model for the older group
fit_older <- cfa(model_2, 
                 data = older_data, 
                 std.lv = TRUE, 
                 missing = "fiml", 
                 fixed.x = FALSE)

# Generate graph for the older group
structure_o <- graph_sem(fit_older, layout = layout_older, text_size = 2.5)
structure_o

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "structure_older.png"),
  plot = structure_o,
  width = 10,
  height = 6,
  dpi = 300
)

```

Try higher order factor model

```{r}
model_higher_order <- '
EF =~ hf + mg + sds
Reasoning =~ matrix + mrot + math
Lang =~ trog + vocab
Social_cog =~ tom

All =~ EF + Reasoning + Lang + Social_cog
'

fit_ho <- cfa(model_higher_order, 
              data = scores_wide_mat |> filter(!is.na(age_group)),
              group = "age_group", 
              std.lv = FALSE, 
              missing = "fiml", 
              fixed.x = FALSE)
summary(fit_ho, fit.measures = TRUE, standardized = TRUE)

# factor covariance matrices
lavInspect(fit_ho, "cov.lv")[[1]]  # younger
lavInspect(fit_ho, "cov.lv")[[2]]  # older


```

Testing factor structure within each group separately

```{r}
# create groups
efa_vars <- c("hf", "mg", "sds", "matrix", "mrot", "math", "trog", "vocab", "tom")

younger_data <- scores_wide_mat |>
  filter(age_group == "younger") |>
  select(all_of(efa_vars))

older_data <- scores_wide_mat |>
  filter(age_group == "older") |>
  select(all_of(efa_vars))

```

Define model

```{r}
dimen_model <- function(n_factors, vars) {
  factors <- paste0("F", 1:n_factors)
  lhs <- paste0("efa('block1')*", factors)
  rhs <- paste(vars, collapse = " + ")
  model_string <- paste(paste(lhs, rhs, sep = " =~ "), collapse = "\n")
  return(model_string)
}

model_1f <- dimen_model(1, efa_vars)
model_2f <- dimen_model(2, efa_vars)
model_3f <- dimen_model(3, efa_vars)
model_4f <- dimen_model(4, efa_vars)


```

Younger

```{r}
fit_y1 <- cfa(model_1f, data = younger_data, estimator = "MLR", missing = "fiml")
fit_y2 <- cfa(model_2f, data = younger_data, estimator = "MLR", missing = "fiml")
fit_y3 <- cfa(model_3f, data = younger_data, estimator = "MLR", missing = "fiml")
fit_y4 <- cfa(model_4f, data = younger_data, estimator = "MLR", missing = "fiml")

# 3- and 4-factor solutions are not well-supported in younger group (heywood cases, non-positive definite covariance matrix of parameters). Aligns with previous model - very high correlations between EF, Reasoning, and Language (0.93â€“0.98) suggesting a less differentiated structure.

```

Indices for fa 1 and 2 only (younger)

```{r}
summary(fit_y1, fit.measures = TRUE, standardized = TRUE)
summary(fit_y2, fit.measures = TRUE, standardized = TRUE)

# 2 fa strucutre fits best

```

Older

```{r}
fit_o1 <- cfa(model_1f, data = older_data, estimator = "ML", missing = "fiml")
fit_o2 <- cfa(model_2f, data = older_data, estimator = "ML", missing = "fiml")
fit_o3 <- cfa(model_3f, data = older_data, estimator = "ML", missing = "fiml")
fit_o4 <- cfa(model_4f, data = older_data, estimator = "ML", missing = "fiml")

# 3 and 4 fa models are failing. Not enough complete case pairs: Many variable pairs have <130 complete cases, which is far below what's needed to estimate stable covariances, especially when you try to extract 3â€“4 latent factors. 

summary(fit_o1, fit.measures = TRUE, standardized = TRUE)
summary(fit_o2, fit.measures = TRUE, standardized = TRUE)
summary(fit_o3, fit.measures = TRUE, standardized = TRUE)
summary(fit_o4, fit.measures = TRUE, standardized = TRUE)



# examine pairwise correlations
nrow(older_data)
colSums(is.na(older_data))
pairwise_n <- outer(efa_vars, efa_vars, Vectorize(function(i, j) {
  sum(complete.cases(older_data[, c(i, j)]))
}))
rownames(pairwise_n) <- colnames(pairwise_n) <- efa_vars
pairwise_n

```

Extract fit indices for 1 and 2 fac models for both younger and older age groups

```{r}
# Extract fit indices for each model
fit_y1_indices <- fitMeasures(fit_y1)
fit_y2_indices <- fitMeasures(fit_y2)
fit_o1_indices <- fitMeasures(fit_o1)
fit_o2_indices <- fitMeasures(fit_o2)

# Create a summary dataframe
fit_comparison <- data.frame(
  Model = c("Younger 1-factor", "Younger 2-factor", "Older 1-factor", "Older 2-factor"),
  CFI = c(fit_y1_indices["cfi"], fit_y2_indices["cfi"], fit_o1_indices["cfi"], fit_o2_indices["cfi"]),
  TLI = c(fit_y1_indices["tli"], fit_y2_indices["tli"], fit_o1_indices["tli"], fit_o2_indices["tli"]),
  RMSEA = c(fit_y1_indices["rmsea"], fit_y2_indices["rmsea"], fit_o1_indices["rmsea"], fit_o2_indices["rmsea"]),
  SRMR = c(fit_y1_indices["srmr"], fit_y2_indices["srmr"], fit_o1_indices["srmr"], fit_o2_indices["srmr"]),
  AIC = c(fit_y1_indices["aic"], fit_y2_indices["aic"], fit_o1_indices["aic"], fit_o2_indices["aic"]),
  BIC = c(fit_y1_indices["bic"], fit_y2_indices["bic"], fit_o1_indices["bic"], fit_o2_indices["bic"])
)

# View the comparison table
print(fit_comparison)


```

Try with reduced model - vars that have enough complete case vars

```{r}
high_cov_vars <- c("hf", "mg", "matrix", "mrot", "math", "tom")

make_efa_model <- function(n_factors, vars) {
  factors <- paste0("F", 1:n_factors)
  lhs <- paste0("efa('block1')*", factors)
  rhs <- paste(vars, collapse = " + ")
  model_string <- paste(paste(lhs, rhs, sep = " =~ "), collapse = "\n")
  return(model_string)
}

model_1f_r <- make_efa_model(1, high_cov_vars)
model_2f_r <- make_efa_model(2, high_cov_vars)
model_3f_r <- make_efa_model(3, high_cov_vars)

older_data_reduced <- older_data |> select(all_of(high_cov_vars))

fit_r1 <- cfa(model_1f_r, data = older_data_reduced, estimator = "ML", missing = "fiml")
fit_r2 <- cfa(model_2f_r, data = older_data_reduced, estimator = "ML", missing = "fiml")
fit_r3 <- cfa(model_3f_r, data = older_data_reduced, estimator = "ML", missing = "fiml")

summary(fit_r1, fit.measures = TRUE, standardized = TRUE)
summary(fit_r2, fit.measures = TRUE, standardized = TRUE)

# 3 fa model is failing. (vcov) does not appear to be positive definite.

```

Invariance testing

```{r}

# configural (free parameters in both groups)
fit_configural <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE)

# Metric (equal loadings)
fit_metric <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE, group.equal = "loadings")

# Scalar (equal loadings + intercepts)
fit_scalar <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE, group.equal = c("loadings", "intercepts"))

# Compare models
anova(fit_configural, fit_metric, fit_scalar)

```

```{r}
```

```{r}
```

```{r}
```
