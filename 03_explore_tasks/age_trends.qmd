---
title: "Age trends"
format: html
editor: visual
---
```{r setup}
library(tidyverse)
library(here)
library(glue)
library(lavaan)
library(tidySEM)
library(ggthemes)
library(tidyr)
library(knitr)

source(here("02_score_data","irt_helpers.R"))
source(here("03_summaries", "plotting_helper.R"))
source(here("03_explore_tasks/explore_helper.R"))
```

load thetas for 9 core tasks (not ROAR, mefs or ha)

```{r}
multigroup <- read_rds(here("02_scoring_outputs","scores",
                             "multigroup_scores.rds"))
colnames(multigroup)
glimpse(multigroup)
unique(multigroup$item_task)

# define tasks for EFA (remove ha)
tasks <- c("hf", "math", "matrix", "mg", "mrot", "sds", "tom", "trog", "vocab")

```

run ages

```{r}
# create sites
sites <- c("ca_pilot", "co_pilot", "de_pilot")

run_ages <- read_rds(here(glue("01_fetched_data/run_data.rds"))) |>
  select(site, task_id, user_id, run_id, age) |>
  filter(site %in% sites)

ages <- run_ages |>
  group_by(user_id) |>
  summarise(age = mean(age, na.rm=TRUE))

```

missingness for age var

```{r}
sum(is.na(run_ages$age)) #total missing values
mean(is.na(run_ages$age)) * 100 # %missing

# unique users with age data
run_ages |>
  filter(!is.na(age)) |>
  distinct(user_id) |>
  count()

# by site
run_ages |>
  filter(!is.na(age)) |>
  distinct(user_id, site) |>
  count(site, name = "n_users_with_age")

# tot. number of unique users per site
n_users <- run_ages |>
  distinct(user_id, site) |>
  count(site, name = "n_users_total")

# users with non-missing age per site
n_users_with_age <- run_ages |>
  filter(!is.na(age)) |>
  distinct(user_id, site) |>
  count(site, name = "n_users_with_age")

# merge and calculate % with age per site
user_age_summary <- n_users |>
  left_join(n_users_with_age, by = "site") |>
  mutate(
    n_users_with_age = replace_na(n_users_with_age, 0),
    pct_with_age = round(100 * n_users_with_age / n_users_total, 1)
  )

user_age_summary
```

Plot

```{r}
ability_scores <- multigroup |>
  filter(item_task %in% tasks, str_detect(metric_type, "ability")) |>
  select(user_id, item_task, metric_type, metric_value, site) |> 
  rename(task = item_task, ability = metric_value)

user_ages <- run_ages |>
  group_by(user_id) |>
  summarise(age = mean(age, na.rm = TRUE))

plot_data <- ability_scores |>
  left_join(user_ages, by = "user_id") |>
  filter(!is.na(age), !is.na(ability))

ggplot(plot_data, aes(x = age, y = ability)) +
  geom_point(alpha = 0.3, size = 0.8) +
  geom_smooth(method = "loess", se = TRUE, colour = "blue") +
  facet_wrap(~ task, scales = "free_y") +
  theme_minimal() +
  labs(
    title = "Ability vs. Age across Tasks",
    x = "Age (years)",
    y = "Ability (model-specific)"
  )

```
by site

```{r}
ggplot(plot_data, aes(x = age, y = ability, color = site)) +
  geom_point(alpha = 0.3, size = 0.8) +
  geom_smooth(method = "loess", se = TRUE) +
  facet_wrap(~ task, scales = "free_y") +
  theme_minimal() +
  labs(
  title = "Ability vs. Age across Tasks by Site",
  caption = "Ca: n = 119; Co: n = 743; De: n = 374",
  x = "Age (years)",
  y = "Ability (model-specific)",
  color = "Site"
  )





```
Quantifying slope differences
```{r}
library(broom)

slopes <- plot_data |>
  group_by(task, site) |>
  do(tidy(lm(ability ~ age, data = .))) |>
  filter(term == "age") |>
  select(task, site, estimate, std.error, p.value)

slopes

library(ggplot2)
library(dplyr)

# Assume your regression results are in a dataframe called `slopes`
# with columns: task, site, estimate, std.error

# Create 95% confidence intervals
slopes <- slopes |>
  mutate(
    lower = estimate - 1.96 * std.error,
    upper = estimate + 1.96 * std.error,
    label = paste(task, site, sep = " - ")
  )

# Plot
ggplot(slopes, aes(x = estimate, y = site)) +
  geom_point() +
  geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed", colour = "grey50") +
  facet_wrap(~ task, scales = "free_y") +
  labs(
    title = "Developmental Sensitivity by Task and Site",
    caption = "Ca: n = 119; Co: n = 743; De: n = 374",
    x = "Slope of Ability ~ Age",
    y = NULL
  ) +
  theme_minimal()



```

highlight non significant points

```{r}
slopes <- slopes |>
  mutate(
    sig = ifelse(lower > 0 | upper < 0, "Significant", "Not significant")
  )

ggplot(slopes, aes(x = estimate, y = site, color = sig)) +
  geom_point() +
  geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2) +
  geom_vline(xintercept = 0, linetype = "dashed", colour = "grey50") +
  facet_wrap(~ task, scales = "free_y") +
  scale_color_manual(values = c("Significant" = "blue", "Not significant" = "red")) +
  labs(
    title = "Developmental Sensitivity by Task and Site",
    caption = "Ca: n = 119; Co: n = 743; De: n = 374",
    x = "Slope of Ability ~ Age",
    y = NULL,
    color = "Significance"
  ) +
  theme_minimal()

```

does the factor structure change by age?

```{r}

# long to wide â€” one row per participant, one column per task
scores_wide <- multigroup |>
  group_by(user_id, site, item_task) |>
  summarise(metric_value = mean(metric_value, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = item_task, values_from = metric_value)

# clean names and join age 
scores_wide_mat <- scores_wide |>
  janitor::clean_names() |>
  left_join(ages, by = "user_id")

# define model
model_1 <- '
EF =~ hf + mg + sds
Reasoning =~ matrix + mrot + math
Lang =~ trog + vocab
Social_cog =~ tom

# add age regressions
EF ~ age
Reasoning ~ age
Lang ~ age
Social_cog ~ age
'

fit_1 <- cfa(model_1, data = scores_wide_mat,
              std.lv = TRUE, missing = "fiml",
              fixed.x = FALSE,  # so that it doesn't drop those who are missing age
              bounds = list(lower = 0.001)) # included to avoid heywood cases

summary(fit_1, fit.measures = TRUE, standardize = TRUE)

```

Examine factor structure in younger and older age groups (split by median)

```{r}
scores_wide_mat <- scores_wide_mat |> 
  mutate(age_group = if_else(age <= median(age, na.rm = TRUE), "younger", "older"))

# define model
model_2 <- '
EF =~ hf + mg + sds
Reasoning =~ matrix + mrot + math
Lang =~ trog + vocab
Social_cog =~ tom
'

# multigroup cfa to check if factor structure and covariances differ by age
fit_multigroup <- cfa(model_2, 
                      data = scores_wide_mat, 
                      group = "age_group",
                      std.lv = TRUE, 
                      missing = "fiml",
                      fixed.x = FALSE, 
                      bounds = list(lower = 0.001))


# warning 1: how many participants are missing age
sum(is.na(scores_wide_mat$age))

# warning 2: look at the factor covariance matrix
lavInspect(fit_multigroup, "cov.lv")  

# Covariances are all very high >1 suggesting implausibly strong or indistinguishable constructs for the younger age group
```

Invariance testing

```{r}

# 1. Configural (free parameters in both groups)
fit_configural <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE)

# 2. Metric invariance (equal loadings)
fit_metric <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE, group.equal = "loadings")

# 3. Scalar (equal loadings + intercepts)
fit_scalar <- cfa(model_1, data = scores_wide_mat, group = "age_group", std.lv = TRUE, group.equal = c("loadings", "intercepts"))

# Compare models
anova(fit_configural, fit_metric, fit_scalar)

```

```{r}
```

```{r}
```

```{r}
```