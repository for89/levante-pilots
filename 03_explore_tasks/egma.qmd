---
title: "LEVANTE Egma"
author: "Fionnuala O'Reilly"
toc: true
number-sections: true
highlight-style: pygments
format:
  html: 
    code-fold: true
---
Required packages

```{r}

#| echo: false

load_or_install <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}

load_or_install("tidyverse")
load_or_install("glue")
load_or_install("here")
load_or_install("viridis")
load_or_install("purrr")
load_or_install("readr")
load_or_install("dplyr")
load_or_install("tidyr")
load_or_install("quarto")
load_or_install("forcats")
load_or_install("ggplot2")


```

Helper functions

```{r}
#| echo: false

source(here("02_score_data","irt_helpers.R"))
source(here("03_summaries", "plotting_helper.R"))
source(here("03_explore_tasks/explore_helper.R"))

```

Get egma data

```{r}
egma <- load_task_data("egma-math")
egma
```

Exploring item group

```{r}
base::table(egma$item_group)
sort(unique(egma$item_group))

```
Sum scores

```{r}

# 94 items

colnames(egma)

egma_runs <- egma |>
  group_by(site, user_id, run_id) |>
  summarise(
    correct = mean(correct, na.rm = TRUE),  
    age = mean(age, na.rm = TRUE),          
    n_items = n_distinct(item_uid) # how many unique items were completed
  )

ggplot(egma_runs, aes(x = age, y = correct)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "re")) +
  theme_minimal(base_family = "sans") +
  ylim(0, 1) +
  facet_wrap(~site)

```

Accuracy on item groups

```{r}
egma_cat_runs <- egma |>
  group_by(site, user_id, run_id, item_group) |>
  summarise(
    correct = mean(correct, na.rm = TRUE),
    age = mean(age, na.rm = TRUE),
    n_items = n_distinct(item_uid),
    .groups = "drop"
  )

egma_counts <- egma_cat_runs |>
  group_by(site, item_group) |>
  summarise(n = n(), .groups = "drop")
```

Plot

```{r fig.height =8, fig.width = 10}

ggplot(egma_cat_runs, aes(x = age, y = correct)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm") +
  geom_text(data = egma_counts,
          aes(x = Inf, y = Inf, label = paste0("n = ", n)),
          hjust = -0.1, vjust = 1,
          size = 3, 
          inherit.aes = FALSE) +
  theme_minimal(base_family = "sans") +
  ylim(0, 1) +
  facet_grid(site ~ item_group) +
  labs(title = "EGMA Accuracy by Age, Site, and Category",
       x = "Age (years)",
       y = "Proportion Correct")

```

Cleaner graph 

```{r}

egma_type <- egma |>
  group_by(site, user_id, run_id, item_group) |>
  summarise(correct = mean(correct, na.rm = TRUE),
            age = mean(age, na.rm = TRUE))

ggplot(egma_type, aes(x = age, y = correct, col = item_group)) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal(base_family = "sans") + 
  viridis::scale_color_viridis(discrete=TRUE) +
  facet_wrap(~site)

```

Difficulty

```{r}

# Proportion correct per item per site
item_difficulty <- egma |>
  group_by(site, item_uid) |>
  summarise(p_correct = mean(correct, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = site, values_from = p_correct)

# Man accuracy across sites
egma_difficulty_raw <- item_difficulty |>
  mutate(mean_accuracy = rowMeans(across(-item_uid), na.rm = TRUE))

# Reorder items from easiest to hardest
egma_difficulty_raw <- egma_difficulty_raw |>
  mutate(item_uid = fct_reorder(item_uid, mean_accuracy))

```

Plot

```{r fig.height =20, fig.width = 10}

ggplot(egma_difficulty_raw, aes(x = item_uid, y = mean_accuracy, fill = mean_accuracy)) +
  geom_col() +
  scale_fill_viridis_c() +
  coord_flip() +
  labs(
    title = "EGMA Item Difficulty (Easiest to Hardest)",
    x = "Item (UID)",
    y = "Mean Proportion Correct",
    fill = "Accuracy"
  ) +
  ylim(0, 1) +
  theme_minimal(base_family = "sans")

# Note: The 'easiest' items are based on the proportion of correct responses, which can be misleading if only a few participants attempted them. For example, two fraction items appear among the easiest, even though fractions are generally the most difficult categoryâ€”this is because the few participants who saw those items answered them correctly. IRT model accounts for this as it estimates item difficulty and discrimination while adjusting for participant ability.

```

Difficulty by item_group

```{r}
egma_groups <- egma |>
  select(item_uid, item_group) |>
  distinct()

egma_difficulty_grouped <- egma_difficulty_raw |>
  left_join(egma_groups, by = "item_uid")

# Mean accuracy by item group
egma_group_summary <- egma_difficulty_grouped |>
  group_by(item_group) |>
  summarise(
    mean_accuracy = mean(mean_accuracy, na.rm = TRUE),
    n_items = n(),
    .groups = "drop"
  ) |>
  arrange(desc(mean_accuracy))

# Bar graph
ggplot(egma_group_summary, aes(x = fct_reorder(item_group, mean_accuracy), y = mean_accuracy, fill = mean_accuracy)) +
  geom_col() +
  scale_fill_viridis_c() +
  coord_flip() +
  labs(
    title = "Average Difficulty by Item Group (EGMA)",
    x = "Item Group",
    y = "Mean Proportion Correct",
    fill = "Accuracy"
  ) +
  ylim(0, 1) +
  theme_minimal(base_family = "sans")

```

Box plot - spread of accuracy across categories

```{r}

ggplot(egma_difficulty_grouped, aes(x = fct_reorder(item_group, mean_accuracy), y = mean_accuracy, fill = item_group)) +
  geom_boxplot() +
  scale_fill_viridis_d() +
  coord_flip() +
  labs(
    title = "Distribution of Item Difficulty by Group (EGMA)",
    x = "Item Group",
    y = "Mean Accuracy"
  ) +
  theme_minimal(base_family = "sans") +
  theme(legend.position = "none")

```

Reaction times
```{r}

summary(egma$rt_numeric)

egma_trimmed <- egma |> 
  filter(rt_numeric > 200, rt_numeric < 5000)

ggplot(egma_trimmed, aes(x = rt_numeric)) +
  geom_histogram(binwidth = 100, fill = "steelblue", colour = "white") +
  facet_wrap(~site, scales = "free_y") +
  theme_minimal(base_family = "sans") +
  labs(
    title = "Histogram of Reaction Times by Site",
    x = "Reaction Time (ms)",
    y = "Count"
  )

# Check outliers
summary(egma$rt_numeric)
summary(egma_trimmed$rt_numeric)


```

Load IRT results

```{r}
best_multigroup <- readRDS(here("02_scoring_outputs", "irt_outputs", "independent_item_coefs.rds"))
multigroup_scores <- readRDS(here("02_scoring_outputs", "scores", "scores_multigroup.rds"))

```

Multigroup models

Developmental trends in egma math ability estimates by site

This plot shows how IRT-derived ability estimates (theta scores, i.e. estimated latent ability) from the Egma task vary with age across different sites.
```{r}

run_ages <- egma |>
  select(site, run_id, user_id, age) |>
  distinct()

multigroup_scores_egma <- multigroup_scores |>
  filter(task_id == "egma-math") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value) |>
  left_join(run_ages)

glimpse(multigroup_scores_egma)

ggplot(multigroup_scores_egma, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  theme_minimal(base_family = "sans") +
  geom_smooth()

```

Get the coefficients - there doesn't seem to be any coefficients; return to this tomorrow. 

```{r}
egma_coefs <- best_multigroup |>
  filter(task_id == "egma-math", term == "difficulty", str_detect(item, "^egma_"))

head(egma_coefs)

# Calculate mean IRT difficulty across sites
irt_difficulty <- egma_coefs |>
  group_by(item) |>
  summarise(mean_d = mean(value, na.rm = TRUE), .groups = "drop")

# Join with item_group

egma_groups <- egma |>
  select(item_uid, item_group) |>
  distinct() |>
  mutate(item = glue("{item_uid}_1"))  # Adjust if item names have a different suffix

egma_difficulty_grouped <- left_join(irt_difficulty, egma_groups, by = "item")

```

Item difficulty by group

```{r}

ggplot(egma_difficulty_grouped, aes(x = fct_reorder(item_group, mean_d), y = mean_d, fill = item_group)) +
  geom_boxplot(alpha = 0.8) +
  coord_flip() +
  scale_fill_viridis_d(option = "C") +
  labs(
    title = "Distribution of EGMA Item Difficulty by Item Group",
    x = "Item Group",
    y = "Mean IRT Difficulty"
  ) +
  theme_minimal(base_family = "sans") +
  theme(legend.position = "none")
```

IRT difficulty [return to this tomorrow - april 23]

```{r}

# Calculate mean IRT difficulty (d) for each item across groups
irt_difficulty <- egma_coefs |> 
  group_by(item) |> 
  summarise(mean_d = mean(d, na.rm = TRUE)) 

# Match item to item_uid
irt_difficulty <- irt_difficulty |>
  mutate(item_uid = str_remove(item, "_1")) 

# Check
unique(irt_difficulty$item_uid)
unique(egma$item_uid)

# Join with item_group info.
irt_difficulty_grouped <- irt_difficulty |>
  left_join(egma_groups, by = "item_uid")

# Summarise mean difficulty by group
irt_group_summary <- irt_difficulty_grouped |>
  group_by(item_group) |>
  summarise(
    mean_d = mean(mean_d, na.rm = TRUE),
    n_items = n(),
    .groups = "drop"
  ) |>
  arrange(mean_d)  # Lower = easier

# Plot
ggplot(irt_group_summary, aes(x = fct_reorder(item_group, mean_d), y = mean_d, fill = mean_d)) +
  geom_col() +
  scale_fill_viridis_c() +
  coord_flip() +
  labs(
    title = "Mean IRT Difficulty by Item Group (EGMA)",
    x = "Item Group",
    y = "Mean Difficulty (d)",
    fill = "Difficulty"
  ) +
  theme_minimal(base_family = "sans")

# Return to this - line is one of the harder categories with the raw data. There's also something going on with NA. 

# END

```

```{r}

```


