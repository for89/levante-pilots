---
title: "LEVANTE Vocab"
author: "Fionnuala O'Reilly"
toc: true
number-sections: true
highlight-style: pygments
format:
  html: 
    code-fold: true
---

Packages

```{r}
library(tidyverse)
library(glue)
library(here)

invisible(source(here("03_explore_tasks/explore_helper.R")))

```

Get vocab data

```{r}
vocab <- load_task_data("vocab")
invisible(vocab)
```

Get sum scores

```{r}

vocab_runs <- vocab |>
  group_by(site, user_id, run_id) |>
  summarise(
    correct = mean(correct, na.rm = TRUE),  # mean accuracy per run
    age = mean(age, na.rm = TRUE),          # average age
    n_items = n_distinct(item_uid)          # how many unique items were completed
  )

ggplot(vocab_runs, aes(x = age, y = correct)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "loess") +
  theme_minimal(base_family = "sans") +
  ylim(0, 1) +
  facet_wrap(~site)

```

Item completion patterns across countries

```{r}

ggplot(vocab_runs, aes(x = n_items)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(~site)

```

Examining least and most difficult items

```{r}
# Calculate item-level accuracy
item_accuracy <- vocab |>
  group_by(item_uid) |>
  summarise(proportion_correct = mean(correct, na.rm = TRUE)) |>
  arrange(proportion_correct) |>
  mutate(item_rank = row_number())

# Plot all items
ggplot(item_accuracy, aes(x = reorder(item_uid, proportion_correct), y = proportion_correct)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Proportion Correct by Vocabulary Item (All Items)",
    x = "Vocabulary Item",
    y = "Proportion Correct"
  ) +
  theme_minimal()

# Filter every 10th item
sampled_items <- item_accuracy |>
  filter(item_rank %% 10 == 0)

# Plot sampled items
ggplot(sampled_items, aes(x = reorder(item_uid, proportion_correct), y = proportion_correct)) +
  geom_col() +
  coord_flip() +
  labs(
    title = "Proportion Correct (Sampled Vocabulary Items)",
    x = "Vocabulary Item (every 10th)",
    y = "Proportion Correct"
  ) +
  theme_minimal()

```

By age

```{r}

# Create age brackets
vocab_binned <- vocab |>
  mutate(age_bracket = case_when(
    age <= 5 ~ "0–5",
    age >= 6 & age <= 9 ~ "6–9",
    age >= 10 & age <= 12 ~ "10–12",
    TRUE ~ NA_character_
  )) |>
  filter(!is.na(age_bracket))

# Accuracy by age
item_accuracy_by_bracket <- vocab_binned |>
  group_by(age_bracket, item_uid) |>
  summarise(
    proportion_correct = mean(correct, na.rm = TRUE),
    n = n(),  # sample size
    .groups = "drop"
  )

# Top 10 easiest and 10 hardest per age bin 
easiest_hardest_by_bracket <- item_accuracy_by_bracket |>
  group_by(age_bracket) |>
  arrange(proportion_correct) |>
  mutate(rank = row_number()) |>
  filter(rank <= 10 | rank > (n() - 10))  # keep bottom and top 10

# Plot with sample size labels
ggplot(easiest_hardest_by_bracket, aes(x = reorder(item_uid, proportion_correct), y = proportion_correct, fill = age_bracket)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = glue::glue("n = {n}")), hjust = -0.1, size = 2.3) +
  coord_flip() +
  facet_wrap(~ age_bracket, scales = "free_y") +
  labs(
    title = "Easiest and Hardest Vocabulary Items by Age Bracket",
    x = "Vocabulary Item",
    y = "Proportion Correct"
  ) +
  ylim(0, 1.1) +
  theme_minimal()

```

By country

```{r}

# Accuracy per item by site
item_accuracy_by_site <- vocab |>
  filter(site %in% c("ca_pilot", "co_pilot", "de_pilot")) |>
  group_by(site, item_uid) |>
  summarise(
    proportion_correct = mean(correct, na.rm = TRUE),
    n = n(),  # sample size
    .groups = "drop"
  )

# Top 10 easiest and hardest items per site
easiest_hardest_by_site <- item_accuracy_by_site |>
  group_by(site) |>
  arrange(proportion_correct) |>
  mutate(rank = row_number()) |>
  filter(rank <= 10 | rank > (n() - 10))

# Plot 
ggplot(easiest_hardest_by_site, aes(x = reorder(item_uid, proportion_correct), y = proportion_correct, fill = site)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = glue::glue("{n}")),
            hjust = -0.1, size = 1.5) +
  coord_flip() +
  facet_wrap(~ site, scales = "free_y") +
  labs(
    title = "Easiest and Hardest Vocabulary Items by Country",
    x = "Vocabulary Item",
    y = "Proportion Correct"
  ) +
  ylim(0, 1.05) +
  theme_minimal()

```

Load IRT results

```{r}

# Load multigroup IRT model outputs
best_multigroup <- readRDS(here("02_scoring_outputs", "irt_outputs", "multigroup_best_outputs.rds"))
multigroup_scores <- readRDS(here("02_scoring_outputs", "scores", "scores_multigroup.rds"))

```

Multigroup models

```{r}

multigroup_scores_vocab <- multigroup_scores |>
  filter(task_id == "vocab") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value ) |>
  left_join(run_ages)

ggplot(multigroup_scores_vocab, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  theme_minimal(base_family = "sans") +
  geom_smooth()

```

Look at the coefficients

```{r}

vocab_items <- filter(best_multigroup, task_id == "vocab")$coefs[[1]]$item
head(vocab_items, 10) 
table(vocab_coefs$site, useNA = "always")

vocab_coefs <- filter(best_multigroup, task_id == "vocab")$coefs[[1]] |>
  separate(item, into = c("task", "empty", "trial", "number"), sep = "_") |>
  select(-number, -empty) |>
  distinct()

# Difficulty vs. discrimination (slope) plot 

library(ggrepel)

ggplot(vocab_coefs, aes(x = a1, y = -d, label = trial, col = site)) + 
  geom_point(size = 3) +
  geom_text_repel(size = 3, max.overlaps = 15) +
  xlab("Discrimination (Slope, a1)") + 
  ylab("Difficulty (-d)") + 
  ggtitle("Item Parameters for Vocab") +
  theme_minimal(base_family = "sans") +
  theme(legend.position = "bottom")

```
Examine 'tourniquet' - like that IRT model not fitting it correctly

```{r}

"vocab__tourniquet_1" %in% vocab_items

vocab_coef_tourniquet <- filter(best_multigroup, task_id == "vocab")$coefs[[1]] |>
  filter(str_detect(item, "tourniquet")) |>
  separate(item, into = c("task", "empty", "trial", "number"), sep = "_") |>
  select(-number, -empty)
print(vocab_coef_tourniquet)

# Plot of discrimination and difficulty by site
vocab_coef_tourniquet_long <- vocab_coef_tourniquet %>%
  pivot_longer(cols = c(a1, d), names_to = "parameter", values_to = "value")

# Plot
ggplot(vocab_coef_tourniquet_long, aes(x = site, y = value, fill = parameter)) +
  geom_col(position = "dodge") +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(~parameter, scales = "free_y") +
  labs(title = "IRT Parameters for 'tourniquet' by Site",
       y = "Value", x = "Site") +
  theme_minimal()

```

Items with a1<0

```{r}

low_a1 <- vocab_coefs %>%
  filter(a1 < 0)
print(low_a1)

invisible(low_a1 %>%
  count(site))
```


