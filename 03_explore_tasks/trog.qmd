---
title: "LEVANTE Trog"
author: "Fionnuala O'Reilly"
toc: true
number-sections: true
highlight-style: pygments
format:
  html: 
    code-fold: true
---

Packages

```{r}
#| echo: false

load_or_install <- function(pkg) {
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}

load_or_install("tidyverse")
load_or_install("glue")
load_or_install("here")
load_or_install("purrr")
load_or_install("readr")
load_or_install("dplyr")
load_or_install("tidyr")
load_or_install("quarto")
load_or_install("ggthemes")
load_or_install("GGally")
load_or_install("stringr")

```

Helper functions

```{r}
#| echo: false

source(here("02_score_data","irt_helpers.R"))
source(here::here("plot_settings.R"))
source(here("03_explore_tasks/explore_helper.R"))

```

Get trog data

```{r}
trog <- load_task_data("trog")
trog
```

Exploring item types

```{r}
base::table(trog$item_group)
sort(unique(trog$item_group))
sort(unique(trog$item_uid))
length(unique(trog$item_uid)) 

```

Get the sum scores

```{r}

colnames(trog)

trog_runs <- trog |>
  group_by(site, user_id, run_id) |>
  summarise(
    correct = mean(correct, na.rm = TRUE),  
    age = mean(age, na.rm = TRUE),          
    n_items = n_distinct(item_uid),  # number of unique items completed
    .groups = "drop"
  )

trog_sum_scores <- ggplot(trog_runs, aes(x = age, y = correct)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "gam", formula = y ~ s(x)) +
  ylim(0, 1) +
  facet_wrap(~site) + 
  labs(
    title = "Age-related accuracy, smoothed trends by site",
    x = "Age (years)",
    y = "Proportion correct",
    caption = "Note: Each point represents a participant run; smoothed trend by site"
  )

print(trog_sum_scores)
ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "trog_sum_scores.png"),
  plot = trog_sum_scores,
  width = 10,
  height = 6,
  dpi = 300
)

```

Item completion patterns across countries

```{r}
ggplot(trog_runs, aes(x = n_items)) +
  geom_histogram(binwidth = 1) +
  theme_minimal(base_family = "sans") +
  facet_wrap(~site)

```

Examining by item group

```{r}

trog_type <- trog |>
  group_by(site, user_id, run_id, item_group) |>
  summarise(correct = mean(correct, na.rm = TRUE),
            age = mean(age, na.rm = TRUE))

ggplot(trog_type, aes(x = age, y = correct, col = item_group)) +
  geom_smooth(method = "lm", se = FALSE) +
   facet_wrap(~site)

```

Grouping items by grammatical structure

```{r}

unique(trog$item_group)

trog_grouped <- trog |>
  mutate(grammar_group = case_when(
    item_group %in% c("noun", "verb", "adjective") ~ "single words",
    item_group %in% c("pluralmorph", "pluralpronoun") ~ "morphology",
    item_group %in% c("2combo", "3combo", "prepphrase", "additive",
                      "inon", "abovebelow", "comparative", "preploc") ~ "composition and prepositions",
    item_group %in% c("negative", "temporal", "causal", "conditional", "genderpronoun") ~ "basic sentences",
    item_group %in% c("revactive", "revpassive") ~ "reversible constructions",
    item_group %in% c("relclause", "embedding", "depclause", "postmod", "gerund", "revpassrelclause") ~ "complex sentences",
    item_group %in% c("relclause", "embedding", "depclause", "postmod", "gerund", "revpassrelclause", "compprepcond") ~ "complex sentences",
    item_group %in% c("disjunctive", "neither", "notonly", "xnoty", "conjcoord") ~ "logical structures",
    item_group == "stimulus" ~ "stimulus"
  ))

trog_grouped |>
  count(grammar_group)

trog_grammar_blocks <- trog_grouped |>
  group_by(site, user_id, run_id, grammar_group) |>
  summarise(
    correct = ifelse(all(is.na(correct)), NA_real_, mean(correct, na.rm = TRUE)),
    age = mean(age, na.rm = TRUE),
    .groups = "drop"
  ) |>
  filter(!is.na(grammar_group)) |>
  mutate(grammar_group = fct_reorder(grammar_group, correct, .desc = TRUE)) 

library(ggthemes)
trog_grammar_groups <- ggplot(trog_grammar_blocks, aes(x = age, y = correct, col = site)) + 
  geom_point(aes(alpha = !is.na(correct)), size = 1, show.legend = FALSE) +
  scale_alpha_manual(values = c(`TRUE` = 0.6, `FALSE` = 0.1)) +
  geom_smooth(data = trog_grammar_blocks |> filter(!is.na(correct)), 
              method = "lm", se = FALSE, span = 2) +
  geom_hline(yintercept = 0.25, lty = 2, colour = "black") + 
  ylim(0, 1) +
  facet_wrap(~grammar_group) 

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "trog_grammar_groups.png"),
  plot = trog_grammar_groups,
  width = 10,
  height = 6,
  dpi = 300
)
```

Now grouping items by difficulty (instead of grammar group)

```{r}

item_difficulty <- trog |>
  group_by(site, item_uid) |>
  summarise(p_correct = mean(correct, na.rm = TRUE)) |>
  pivot_wider(names_from = site, values_from = p_correct)

# Calculate mean difficulty across sites
item_difficulty <- item_difficulty |>
  mutate(mean_accuracy = rowMeans(across(-item_uid), na.rm = TRUE))

# Arrange by difficulty and assign blocks
trog_difficulty_raw <- item_difficulty |>
  arrange(mean_accuracy) |>
  mutate(block = ceiling(row_number() / 4))

```

Examining difficulty block v grammar group [Bar chart showing how items from different grammar groups are distributed across difficulty blocks]

```{r}
trog_difficulty_raw <- trog_difficulty_raw |>
  left_join(trog_grouped, by = "item_uid")

ggplot(trog_difficulty_raw, aes(x = factor(block), fill = grammar_group)) +
  geom_bar(position = "fill") +
  labs(x = "Block", y = "Proportion", fill = "Grammar group",
       title = "Grammar group composition across difficulty blocks")


```

Difficulty patterns across sites

```{r}

library(GGally)
item_difficulty |>
  select(-item_uid) |>
  ggpairs(title = "Pairwise Site-Level Item Difficulties")

```

Load results from IRT model

```{r}
# previous version
# best_multigroup <- readRDS(here("02_scoring_outputs", "irt_outputs", "multigroup_best_outputs.rds"))

best_multigroup <- readRDS(here("02_scoring_outputs", "irt_outputs", "item_coefs.rds"))
multigroup_scores <- readRDS(here("02_scoring_outputs", "scores", "scores_multigroup.rds"))

```

Multigroup models

Developmental trends in trog ability estimates by site

This plot shows how IRT-derived ability estimates (theta scores, i.e. estimated latent ability) from the TROG task vary with age across different sites.
```{r}
run_ages <- trog |>
  select(site, run_id, user_id, age) |>
  distinct()

# Theta scores (computed per person, per task, per site), plotted against age
multigroup_scores_trog <- multigroup_scores |>
  filter(task_id == "trog") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value) |>
  left_join(run_ages)
colnames(multigroup_scores_trog)

trog_irt <- ggplot(multigroup_scores_trog, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  geom_smooth() +
  labs(
    title = "Developmental trends in TROG ability by site",
    subtitle = "IRT-based theta estimates smoothed with GAM",
    x = "Age (years)",
    y = "Ability (IRT Theta Score)",
    colour = "Site"
  )

ggsave(
  filename = here::here("03_explore_tasks", "Graphs", "trog_irt.png"),
  plot = trog_irt,
  width = 10,
  height = 6,
  dpi = 300
)

```

Organizing trog items into difficulty-based blocks using IRT parameters

```{r}
# Filter for trog item difficulty estimates

library(mirt)
trog_coefs <- best_multigroup |>
  filter(task_id == "trog", term == "difficulty", str_detect(item, "^trog_"))

# Calculate mean IRT difficulty across sites
irt_difficulty <- trog_coefs |>
  group_by(item) |>
  summarise(mean_d = mean(value, na.rm = TRUE), .groups = "drop")

# Rebuild item IDs to match grammar group mapping
trog_groups <- trog_grouped |>
  select(item_uid, item_group, grammar_group) |>
  distinct() |>
  mutate(item = glue("{item_uid}_1")) |>  # assumes item names in coefs end with _1
  select(item, grammar_group)

# Join difficulty estimates with grammar group labels
trog_difficulty_irt <- left_join(trog_groups, irt_difficulty, by = "item")

# Reverse code mean_d so that higher means more difficult
trog_difficulty_irt <- trog_difficulty_irt |>
  mutate(mean_d_reversed = -mean_d)

ggplot(trog_difficulty_irt, aes(x = fct_reorder(grammar_group, mean_d_reversed), y = mean_d_reversed, color = grammar_group)) +
  geom_jitter(width = 0.2, size = 2, alpha = 0.8) +  # Use geom_point() instead if you don't want horizontal jitter
  coord_flip() +
  labs(
    x = "Grammar group",
    y = "Reversed IRT difficulty (higher = harder)",
    title = "Reversed TROG item difficulty by grammar group"
  )

# Note narrow spread for some categories like logical structures suggest consistent item behavior.

```

Plot

```{r fig.height =12, fig.width = 10}

ggplot(trog_difficulty_irt, aes(x = reorder(item, mean_d), 
                                y = mean_d, col = grammar_group)) +
  geom_point() +
  coord_flip() +
  labs(
    x = "Item (ordered by mean difficulty)",
    y = "Mean Difficulty (d)",
    title = "TROG item difficulty (mean across sites)",
    colour = "Grammar Group"
  )

```

Comparing IRT and raw difficulty

```{r}

difficulty_compare <- trog_difficulty_raw |>
  mutate(item = glue("{item_uid}_1")) |>
  left_join(trog_difficulty_irt, by = "item")

ggplot(difficulty_compare, aes(x = mean_accuracy, y = mean_d, colour = grammar_group.y)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(
    x = "Raw accuracy",
    y = "IRT difficulty",
    title = "Raw vs IRT difficulty",
    colour = "Grammar group"
  ) 

colnames(difficulty_compare)

# Check correlation
cor(difficulty_compare$mean_accuracy, difficulty_compare$mean_d, use = "complete.obs")

# END



```

```{r}

```


