---
title: "LEVANTE EF Tasks - Interim Report"
author: "Mike Frank"
toc: true
number-sections: true
highlight-style: pygments
format:
  html: 
    code-fold: true
---


# Data loading

```{r}
library(tidyverse)
library(glue)
library(here)
library(mirt)
library(ggrepel)
# require(arm)
library(lavaan)
library(tidySEM)

source(here("02_score_data","irt_helpers.R"))
source(here("03_summaries", "plotting_helper.R"))

source(here("03_explore_tasks/explore_helper.R"))
ef <- load_task_data(c("hearts-and-flowers","same-different-selection","memory-game"))
```

## Load multigroup models


```{r}
best_multigroup <- readRDS(here("02_scoring_outputs", "irt_outputs", "multigroup_best_outputs.rds")) 
multigroup_scores <- readRDS(here("02_scoring_outputs", "scores", "scores_multigroup.rds"))
```


## Overall sumscores

First plot sumscores.

```{r}
ef_runs <- ef |>
  group_by(site, user_id, run_id, task_id) |>
  summarise(correct = mean(correct), 
            age = mean(age))

ggplot(ef_runs, aes(x = age, y = correct)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "loess", lambda = 1) +
  facet_grid(site ~ task_id) + 
  ylim(0,1) 
```

Now go to task analysis. 

# Hearts and Flowers

Zoom in on HF. 

```{r}
hf <- ef |>
  filter(task_id == "hearts-and-flowers") 
```

Look at all phases. 

## Sumscore

```{r}
hf_blocks <- hf |>
  mutate(corpus_trial_type = fct_relevel(corpus_trial_type, "hearts", "flowers", "mixed")) |>
  group_by(site, user_id, run_id, task_id, corpus_trial_type) |>
  summarise(correct = mean(correct), 
            age = mean(age), 
            n = n())

ggplot(hf_blocks,
       aes(x = age, y = correct)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  geom_hline(yintercept = .5, lty = 2) + 
  ylim(0,1) + 
  facet_grid(site ~ corpus_trial_type)
```

F notes that there are a lot of younger kids BELOW chance. Let's see if they are missing data. 

```{r}
ggplot(hf_blocks, aes(x = n, y = correct)) + 
  geom_point() + 
  geom_smooth(method = "lm") + 
  facet_grid(site ~ corpus_trial_type)
```

NO - this is not because of missing data. Something else is happening. 

<!-- Averaged across everything.  -->

```{r}
hf_runs <- hf |>
  group_by(site, user_id, run_id, task_id) |>
  summarise(logit = coef(glm(correct ~ 1, family = "binomial"))[1],
            bayeslogit = coef(arm::bayesglm(correct ~ 1, family = "binomial",
                                            prior.scale.for.intercept = .1))[1],
            correct_rt = mean(as.numeric(rt[correct]), na.rm=TRUE),
            correct = mean(correct),
            age = mean(age))

```

<!-- ggplot(hf_runs, -->
<!--        aes(x = age, y = correct)) +  -->
<!--   geom_point(alpha = .5) +  -->
<!--   geom_smooth(method = "glm", method.args = list(family = "binomial")) + -->
<!--   geom_hline(yintercept = .5, lty = 2) +  -->
<!--   ylim(0,1) +  -->
<!--   facet_grid(site ~ task_id) -->
<!-- ``` -->
<!-- Logit scoring.  -->

<!-- ```{r} -->
<!-- ggplot(hf_runs, -->
<!--        aes(x = age, y = logit)) +  -->
<!--   geom_point(alpha = .5) +  -->
<!--   geom_smooth(method = "glm", method.args = list(family = "binomial")) + -->
<!--   geom_hline(yintercept = 0, lty = 2) +  -->
<!--   # ylim(0,1) +  -->
<!--   facet_grid(site ~ task_id) -->
<!-- ``` -->

<!-- Bayesian logit.  -->

<!-- ```{r} -->
<!-- ggplot(hf_runs, -->
<!--        aes(x = age, y = bayeslogit)) +  -->
<!--   geom_point(alpha = .5) +  -->
<!--   geom_smooth(method = "lm") + -->
<!--   geom_hline(yintercept = 0, lty = 2) +  -->
<!--   # ylim(0,1) +  -->
<!--   facet_grid(site ~ task_id) -->
<!-- ``` -->

Histograms. 

```{r}
ggplot(filter(ef_runs, task_id == "hearts-and-flowers") |>
         mutate(age_group = cut(age, c(5, 7, 9, 11, 13, include.lowest=TRUE))) |>
         filter(!is.na(age_group)),
       aes(x = correct)) + 
  geom_histogram(binwidth = .25) +
  geom_vline(xintercept = .5, lty = 2) +
  scale_x_continuous(breaks = c(0,.25, .5, .75, 1)) + 
  facet_grid(site ~ age_group)
```

Reaction time. 

```{r}
ggplot(hf_runs,
       aes(x = age, y = correct_rt)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm") +
  geom_hline(yintercept = 0, lty = 2) + 
  # ylim(0,1) + 
  facet_grid(site ~ task_id)
```

```{r}
ggplot(hf, aes(x = as.numeric(rt))) + 
  geom_histogram() + 
  scale_x_log10(breaks = c(100,200, 500,1000,2000,3000,5000,10000)) + coord_flip()
```


## IRT

We now use the multigroup IRT models. 

```{r}
multigroup_scores_hf <- multigroup_scores |>
  filter(task_id == "hearts-and-flowers") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value ) |>
  left_join(run_ages)

ggplot(multigroup_scores_hf, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  geom_smooth()
```
Look at coefficients. 

```{r}
hf_coefs <- filter(best_multigroup, task_id == "hearts-and-flowers")$coefs[[1]] |>
  separate(item, sep = "_", into = c("task","block","trial", "number")) |>
  select(-number) |>
  distinct()

ggplot(hf_coefs, aes(x = a1, y = -d, col = block, pch = trial)) + 
  geom_point() + 
  geom_text_repel(aes(label = trial)) + 
  xlab("Slope") + 
  ylab("Difficulty") + 
  facet_wrap(~site) 
```


# Memory game

Merge in item ids. 

```{r}
id_map <- read_csv(here("02_score_data/item_metadata/pilot-item-ID mapping.csv"))

trial_id_map <- id_map |>
  mutate(trials = trials |> str_split(",")) |>
  unnest(trials) |>
  rename(trial_id = trials) |>
  mutate(trial_id = str_trim(trial_id))

```

```{r}
mg <- ef |>
  filter(task_id == "memory-game") |>
  left_join(trial_id_map) |>
  filter(!is.na(item_uid)) |>
  separate(item_uid , into = c("task", "direction", "size", "span"), sep = "_") |>
  mutate(span = as.numeric(str_replace(span, "len",""))) |>
  group_by(run_id, direction) |>
  mutate(max_span = max(span))
```

## Sumscore

```{r}
mg_spans <- mg |>
  group_by(site, span, size, direction) |>
  summarise(n = n(), 
            correct = mean(correct))

ggplot(mg_spans, aes(x = span, y = correct, col = direction, pch = size)) + 
  geom_point(aes(size = n)) + 
  geom_line(aes(lty = size)) + 
  facet_wrap(~site)
```

```{r}

mg |>
  filter(direction == "forward", span > 1) |>
  mutate(age_rounded = as_factor(round(age))) |>
  group_by(age_rounded, span) |>
  summarise(correct = mean(correct), 
            n = n()) |>
  ggplot(aes(x = span, y = correct, col = age_rounded)) + 
  geom_point(aes(size = n)) + 
  geom_smooth(method = "lm", se =FALSE)

```

```{r}

mg |>
  filter(direction == "forward", span > 1) |>
  mutate(max_span = as_factor(max_span)) |>
  group_by(max_span, span) |>
  summarise(correct = mean(correct), 
            n = n()) |>
  ggplot(aes(x = span, y = correct, col = max_span)) + 
  geom_point(aes(size = n)) + 
  geom_line()
  # geom_smooth(method = "lm", se =FALSE)

```



```{r}
mg_runs <- mg |>
  filter(correct) |>
  group_by(site, user_id, run_id, direction) |>
  summarise(max_span = max(span), 
            age = mean(age))
```


```{r}
ggplot(mg_runs, aes(x = age, y = max_span, col = direction)) + 
  geom_jitter(alpha = .5, height = .1, width = 0) + 
  geom_smooth(method = "lm")+ 
  facet_grid(direction~site, scales = "free_y")
```

## IRT

We now use the multigroup IRT models. 

```{r}
multigroup_scores_mg <- multigroup_scores |>
  filter(task_id == "memory-game") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value ) |>
  left_join(run_ages)

ggplot(multigroup_scores_mg, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  geom_smooth()
```
Look at coefficients. 

```{r}
mg_coefs <- filter(best_multigroup, task_id == "memory-game")$coefs[[1]] |>
  separate(item, sep = "_", into = c("task", "direction", "size", "span", "number")) |>
  mutate(span = as.numeric(str_replace(span, "len",""))) |>
  select(-task, -number) |>
  distinct()

ggplot(mg_coefs, aes(x = span, y = -d, col = direction, pch = size)) + 
  geom_point() + 
  geom_line() + 
  # geom_text_repel(aes(label = direction)) + 
  xlab("Slope") + 
  ylab("Difficulty") + 
  facet_wrap(~site) 
```

Note that we have used grid3 very little and so it's getting dropped from most analysis. 


# SDS

```{r}
sds <- filter(ef, task_id == "same-different-selection") |>
  left_join(trial_id_map) |>
  filter(!is.na(item_uid)) |>
  separate(item_uid , into = c("task", "block", "trial"), sep = "_") 
```

## Sumscore

```{r}
sds_runs <- sds |>
  group_by(site, user_id, run_id, task_id) |>
  summarise(correct = mean(correct), 
            age = mean(age))


sds_runs_block <- sds |>
  filter(block != "3unique") |>
  mutate(block = fct_relevel(block, "dimensions","same")) |>
  group_by(site, user_id, run_id, task_id, block) |>
  summarise(correct = mean(correct), 
            age = mean(age))


ggplot(sds_runs_block, aes(x = age, y = correct)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm", se=FALSE) + 
  facet_grid(site ~ block)
```

## IRT

```{r}
multigroup_scores_sds <- multigroup_scores |>
  filter(task_id == "same-different-selection") |>
  select(site, task_id, user_id, run_id, metric_type, metric_value ) |>
  left_join(run_ages)

ggplot(multigroup_scores_sds, aes(x = age, y = metric_value, col = site)) + 
  geom_point() + 
  geom_smooth()
```
Look at coefficients. 

```{r}
sds_coefs <- filter(best_multigroup, task_id == "same-different-selection")$coefs[[1]] |>
  separate(item, sep = "_", into = c("task", "block","trial")) |>
  filter(block != "3unique") |>
  mutate(block = fct_relevel(block, "dimensions","same")) |>
  distinct()

ggplot(sds_coefs, aes(x = block, y = -d, col = trial)) + 
  geom_point() + 
  geom_line(aes(group = trial)) + 
  coord_flip() +
  # geom_text_repel(aes(label = direction)) + 
  xlab("block") + 
  ylab("Difficulty") 
```




# EF factor analysis

## Only LEVANTE tasks

```{r}

ef_scores <- filter(multigroup_scores, 
                    task_id %in% c("hearts-and-flowers", "memory-game", "same-different-selection"))

ef_scores_irt <- ef_scores |>
  select(site, task_id, metric_value, user_id) |>
  pivot_wider(names_from = "task_id", values_from = "metric_value", 
              id_cols = c("user_id", "site")) |>
  janitor:::clean_names() |>
  mutate(across(hearts_and_flowers:same_different_selection, ~ scale(.x)[,1]), 
         ca_site = site == "ca_pilot",
         de_site = site == "de_pilot") |>
  left_join(ages)
```

```{r}
cfa_model <-  "
ef =~ hearts_and_flowers + memory_game + same_different_selection
ef ~ age
"

fit <- cfa(cfa_model, ef_scores_irt, std.lv=TRUE, missing='fiml')
summary(fit, fit.measures=TRUE, standardize=TRUE)

graph_sem(model = fit, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```

Multi-group model

```{r}
# configural invariance
fit1 <- cfa(cfa_model, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site")

# weak invariance
fit2 <- cfa(cfa_model, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site", group.equal = "loadings")

# strong invariance
fit3 <- cfa(cfa_model, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site", group.equal = c("intercepts","loadings"))

# model comparison tests
lavTestLRT(fit1, fit2, fit3)
```

```{r}
graph_sem(model = fit1, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```

## Add MEFS

```{r}
mefs_scores <- read_csv(here("02_scored_data","mefs_data","LEVANTE_20250403_1132.csv")) |>
  janitor::clean_names() |>
  select(child_id, a1_total_score, a1_standard_score) |>
  rename(user_id = child_id, 
         mefs_total = a1_total_score,
         mefs_standard = a1_standard_score
         ) 

ef_scores_irt <- ef_scores_irt |>
  left_join(mefs_scores) |>
  mutate(mefs_total = scale(mefs_total)[,1],
         mefs_standard = scale(mefs_standard)[,1])

```

```{r}
cfa_model_mefs <-  "
ef =~ hearts_and_flowers + memory_game + same_different_selection + mefs_standard
ef ~ age
"

fit <- cfa(cfa_model_mefs, ef_scores_irt, std.lv=TRUE, missing='fiml')
summary(fit, fit.measures=TRUE, standardize=TRUE)

graph_sem(model = fit, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```


```{r}
# configural invariance
fit1 <- cfa(cfa_model_mefs, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site")

# weak invariance
fit2 <- cfa(cfa_model_mefs, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site", group.equal = "loadings")

# strong invariance
fit3 <- cfa(cfa_model_mefs, ef_scores_irt, std.lv=TRUE, missing='fiml', 
           group = "site", group.equal = c("intercepts","loadings"))

# model comparison tests
lavTestLRT(fit1, fit2, fit3)
```


```{r}
graph_sem(model = fit1, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```