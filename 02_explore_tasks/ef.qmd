# Data loading

```{r}
library(tidyverse)
library(glue)
library(here)
library(mirt)
library(ggrepel)
# require(arm)
library(lavaan)
library(tidySEM)

source(here("02_score_data","irt_helpers.R"))
source(here("03_summaries", "plotting_helper.R"))

sites <- c("co_pilot", "de_pilot")

task_data_nested <- sites |>
  set_names() |>
  map(\(s) read_rds(here(glue("01_processed_data/{s}/task_data_nested.rds")))) |>
  list_rbind(names_to = "site")

task_data_combined <- task_data_nested |>
  select(-task_id) |>
  unnest(data) 

ef <- filter(task_data_combined, 
              task_id %in% c("hearts-and-flowers","same-different-selection","memory-game"))
```

Get ages. 

```{r}
participants <- sites |>
  set_names() |>
  map(\(s) read_rds(here(glue("00_prepped_data/{s}/participants.rds")))) |>
  list_rbind(names_to = "site")

run_ages <- participants |>
  select(user_id, ages) |>
  unnest(ages)

# this is useful below for various simplifications
ages <- run_ages |>
  group_by(user_id) |>
  summarise(age = mean(age))

ef <- left_join(ef, run_ages)
```

# Sumscore approach

First plot sumscores.

```{r}
ef_runs <- ef |>
  group_by(site, user_id, run_id, task_id) |>
  summarise(correct = mean(correct), 
            age = mean(age), 
            rt = mean(rt))

ggplot(ef_runs, aes(x = age, y = correct)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "loess", lambda = 1) +
  facet_grid(site ~ task_id)
```

# Hearts and Flowers

Zoom in on HF. 

```{r}
hf_runs <- ef |>
  filter(task_id == "hearts-and-flowers") |>
  group_by(site, user_id, run_id, task_id) |>
  summarise(logit = coef(glm(correct ~ 1, family = "binomial"))[1],
            bayeslogit = coef(arm::bayesglm(correct ~ 1, family = "binomial", 
                                       prior.scale.for.intercept = .1))[1],
            correct_rt = mean(as.numeric(rt[correct]), na.rm=TRUE),
            correct = mean(correct), 
            age = mean(age))

```

```{r}
ggplot(hf_runs,
       aes(x = age, y = correct)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  geom_hline(yintercept = .5, lty = 2) + 
  ylim(0,1) + 
  facet_grid(site ~ task_id)
```
Logit scoring. 

```{r}
ggplot(hf_runs,
       aes(x = age, y = logit)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "glm", method.args = list(family = "binomial")) +
  geom_hline(yintercept = 0, lty = 2) + 
  # ylim(0,1) + 
  facet_grid(site ~ task_id)
```

Bayesian logit. 

```{r}
ggplot(hf_runs,
       aes(x = age, y = bayeslogit)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm") +
  geom_hline(yintercept = 0, lty = 2) + 
  # ylim(0,1) + 
  facet_grid(site ~ task_id)
```

Histograms. 

```{r}
ggplot(filter(ef_runs, task_id == "hearts-and-flowers") |>
         mutate(age_group = cut(age, c(5, 7, 9, 11, 13, include.lowest=TRUE))) |>
         filter(!is.na(age_group)),
       aes(x = correct)) + 
  geom_histogram(binwidth = .25) +
  geom_vline(xintercept = .5, lty = 2) +
  scale_x_continuous(breaks = c(0,.25, .5, .75, 1)) + 
  facet_grid(site ~ age_group)
```

Reaction time. 

```{r}
ggplot(hf_runs,
       aes(x = age, y = correct_rt)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm") +
  geom_hline(yintercept = 0, lty = 2) + 
  # ylim(0,1) + 
  facet_grid(site ~ task_id)
```

## IRT for H&F

```{r}
hf <- ef |>
  filter(task_id == "hearts-and-flowers") |>
  mutate(item_id = item)
  
hf_data_prepped <- hf |>
  nest() |>
  mutate(data_filtered = map(data, \(df) df |> filter_repeat_runs() |>
                               dedupe_items() |> remove_no_var_items()),
         data_prepped = map(data_filtered, to_mirt_shape)) |>
  # pull out chance values
  mutate(guess = map(data_filtered, # TODO: check that this gives correct order
                     \(df) df |> distinct(item_inst, chance) |> pull(chance)))

# generate model strings, using constraints for repeated items

item_types <- c("Rasch", "2PL") #, "3PL") # set of parameterizations
model_types <- c(1) #, 2) # set of dimensionalities
# model_types <- c(1) # set of dimensionalities

# add arguments for model fitting to data
hf_data_args <- hf_data_prepped |>
  # duplicate rows per dimensionality x parameterization
  expand_grid(model_type = model_types, item_type = item_types) |>
  # generate model string with item constraints + dimensionality
  mutate(model_str = pmap_chr(list(data, data_prepped, item_type, model_type),
                              generate_model_str))
hf_models <- hf_data_args |>
  mutate(mod = pmap(list(row_number(), data_prepped, item_type, model_str,
                         model_type, guess),
                    fit_mirt))
```

```{r}
# get each model's coefs, scores, BIC
hf_results <- hf_models |>
  mutate(coefs = map(mod, mirt_coefs),
         scores = pmap(list(mod, data_filtered, data_prepped), mirt_scores),
         bic = map_dbl(mod, mirt_bic))

# best fitting model for each task
hf_best <- hf_results |>
  filter(bic == min(bic)) |>
  ungroup()
  # select(site, task_id, item_type, model_type, coefs, scores)

# scores from best fitting models
hf_scores <- hf_best |>
  select(item_type, model_type, scores) |>
  unnest(scores) |>
  mutate(#item_type = fct_recode(item_type, "1PL" = "Rasch"),
         metric_type = glue("ability ({item_type}-{model_type})")) |>
  select(user_id, run_id, metric_type, metric_value = ability)

```

Coefficients. 

```{r}
head(hf_results$coefs[[2]])
```


```{r}
ggplot(left_join(hf_scores, ages), 
       aes(x = age, y = metric_value)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm") +
  geom_smooth(method = "loess", col = "green") +
  geom_hline(yintercept = 0, lty = 2) 
```


# Memory game

```{r}

mg <- ef |>
  filter(task_id == "memory-game", 
         corpus_trial_type != "") |>
  mutate(span = str_count(response, ":")) 
```


```{r}
mg_spans <- mg |>
  group_by(site, span, corpus_trial_type) |>
  summarise(n = n(), 
            correct = mean(correct))

ggplot(mg_spans, aes(x = span, y = correct, col = corpus_trial_type)) + 
  geom_point(aes(size = n)) + 
  geom_line() + 
  facet_wrap(~site)
```



```{r}
mg_runs <- mg |>
  filter(correct) |>
  group_by(site, user_id, run_id, corpus_trial_type) |>
  summarise(span = max(span), 
            age = mean(age))
```


```{r}
ggplot(mg_runs, aes(x = age, y = span, col = corpus_trial_type)) + 
  geom_jitter(alpha = .5, height = .1, width = 0) + 
  geom_smooth(method = "lm")+ 
  facet_grid(corpus_trial_type~site, scales = "free_y")
```

## memory IRT


```{r}
mg_data_prepped <- mg |>
  filter(corpus_trial_type == "forward") |>
  mutate(item_id = str_c(corpus_trial_type, "_", as.character(span))) |>
  nest() |>
  mutate(data_filtered = map(data, \(df) df |> filter_repeat_runs() |>
                               dedupe_items() |> remove_no_var_items(item_n_min = 1)),
         data_prepped = map(data_filtered, to_mirt_shape)) |>
  # pull out chance values
  mutate(guess = map(data_filtered, # TODO: check that this gives correct order
                     \(df) df |> distinct(item_inst, chance) |> pull(chance)))

# generate model strings, using constraints for repeated items

item_types <- c("Rasch", "2PL") #, "3PL") # set of parameterizations
model_types <- c(1) #, 2) # set of dimensionalities
# model_types <- c(1) # set of dimensionalities

# add arguments for model fitting to data
mg_data_args <- mg_data_prepped |>
  # duplicate rows per dimensionality x parameterization
  expand_grid(model_type = model_types, item_type = item_types) |>
  # generate model string with item constraints + dimensionality
  mutate(model_str = pmap_chr(list(data, data_prepped, item_type, model_type),
                              generate_model_str))

mg_models <- mg_data_args |>
  mutate(mod = pmap(list(row_number(), data_prepped, item_type, model_str,
                         model_type, guess),
                    fit_mirt))
```

```{r}
# get each model's coefs, scores, BIC
mg_results <- mg_models |>
  mutate(coefs = map(mod, mirt_coefs),
         scores = pmap(list(mod, data_filtered, data_prepped), mirt_scores),
         bic = map_dbl(mod, mirt_bic))

# best fitting model for each task
mg_best <- mg_results |>
  filter(bic == min(bic)) |>
  ungroup()
  # select(site, task_id, item_type, model_type, coefs, scores)

# scores from best fitting models
mg_scores <- mg_best |>
  select(item_type, model_type, scores) |>
  unnest(scores) |>
  mutate(#item_type = fct_recode(item_type, "1PL" = "Rasch"),
         metric_type = glue("ability ({item_type}-{model_type})")) |>
  select(user_id, run_id, metric_type, metric_value = ability)

```

```{r}
mg_coefs <- mg_best$coefs[[1]] |>
  mutate(item = fct_reorder(item, d)) |>
  separate(item, sep = "_", into = c("direction","span","number"))

ggplot(mg_coefs, 
       aes(x = span, y = -d, col = direction)) + 
  geom_point() + 
  geom_smooth(aes(group = direction), method = "lm") + 
  ylab("difficulty")
```
Something going wrong with the scoring???

```{r}
ggplot(left_join(mg_results$scores[[1]], ages), 
       aes(x = age, y = ability)) +
  geom_point() + 
  geom_smooth(method = "lm")
```


# SDS


```{r}
sds_scores <- read_rds(here("02_scored_data","scores_irt.rds")) |>
  filter(task_id == "same-different-selection")

sds <- left_join(sds_scores, run_ages) |>
  filter(site %in% sites)

```

```{r}
ggplot(sds, aes(x = age, y = metric_value)) + 
  geom_point(alpha = .5) + 
  geom_smooth(method = "lm") + 
  facet_wrap(~site)
```




# EF factor analysis

```{r}

ef_scores <- bind_rows(sds_scores |> 
                         filter(site %in% sites) |>
                      dplyr::select(site, task_id, user_id, run_id, metric_type, metric_value), 
                    mg_runs |> 
                      filter(corpus_trial_type == "forward") |>
                      mutate(metric_value = span, 
                             metric_type = "longest span",
                             task_id = "memory-game") |>
                      dplyr::select(site, task_id, user_id, run_id, metric_type,  metric_value)) |>
  bind_rows(hf_runs |>
              pivot_longer(c(correct, logit, bayeslogit), names_to = "metric_type", 
                           values_to = "metric_value") |>
              dplyr::select(site, task_id, user_id, run_id, metric_type, metric_value)) |>
  bind_rows(hf_scores |>
              left_join(select(participants, site, user_id)) |>
              mutate(task_id = "hearts-and-flowers"))
```



```{r}
ef_scores_sumscore <- ef_scores |>
  filter(task_id != "hearts-and-flowers" | 
           (task_id == "hearts-and-flowers" & metric_type == "correct")) |>
  dplyr::select(task_id, metric_value, user_id, site) |>
  pivot_wider(names_from = "task_id", values_from = "metric_value", 
              id_cols = c("user_id","site"), 
              values_fn = mean) |>
  janitor:::clean_names() |>
  mutate(across(same_different_selection:hearts_and_flowers, ~ scale(.x)[,1])) |>
  left_join(ages)

ef_scores_bayeslogit <- ef_scores |>
  filter(task_id != "hearts-and-flowers" | 
           (task_id == "hearts-and-flowers" & metric_type == "bayeslogit")) |>
  dplyr::select(task_id, metric_value, user_id, site) |>
  pivot_wider(names_from = "task_id", values_from = "metric_value", 
              id_cols = c("user_id","site"), 
              values_fn = mean) |>
  janitor:::clean_names() |>
  mutate(across(same_different_selection:hearts_and_flowers, ~ scale(.x)[,1])) |>
  left_join(ages)

ef_scores_2pl <- ef_scores |>
  filter(task_id != "hearts-and-flowers" | 
           (task_id == "hearts-and-flowers" & metric_type == "ability (2PL-1)")) |>
  dplyr::select(task_id, metric_value, user_id, site) |>
  pivot_wider(names_from = "task_id", values_from = "metric_value", 
              id_cols = c("user_id","site"), 
              values_fn = mean) |>
  janitor:::clean_names() |>
  mutate(across(same_different_selection:hearts_and_flowers, ~ scale(.x)[,1])) |>
  left_join(ages)
```

```{r}
cfa_model <-  "
ef =~ hearts_and_flowers + memory_game + same_different_selection
ef ~ age
"

fit <- cfa(cfa_model, ef_scores_sumscore, std.lv=TRUE, missing='fiml')
summary(fit, fit.measures=TRUE, standardize=TRUE)

graph_sem(model = fit, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```



```{r}
cfa_model <-  "
ef =~ hearts_and_flowers + memory_game + same_different_selection
ef ~ age
"

fit_bayeslogit <- cfa(cfa_model, ef_scores_bayeslogit, std.lv=TRUE, missing='fiml')
summary(fit_bayeslogit, fit.measures=TRUE, standardize=TRUE)

graph_sem(model = fit_bayeslogit, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```


```{r}
cfa_model <-  "
ef =~ hearts_and_flowers + memory_game + same_different_selection
ef ~ age
"

fit_2pl <- cfa(cfa_model, ef_scores_2pl, std.lv=TRUE, missing='fiml')
summary(fit_2pl, fit.measures=TRUE, standardize=TRUE)

graph_sem(model = fit_2pl, text_size = 3) + 
  theme(panel.background = element_rect(fill = "white"))
```


```{r}
anova(fit, fit_bayeslogit)
```

